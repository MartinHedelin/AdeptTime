@page "/login"
@using parlayrunner.Shared.Models
@using parlayrunner.Shared.ViewModels
@using parlayrunner.Components.Layout
@layout LoginLayout

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f3f4f6;
        padding: 1rem;
    }

    .login-box {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .text-center {
        text-align: center;
    }

    h2 {
        margin-bottom: 1rem;
        font-size: 1.875rem;
        font-weight: 700;
        color: #111827;
    }

    .social-buttons {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin: 1.5rem 0;
    }

    .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        width: 100%;
        border: 1px solid #d1d5db;
        background: white;
        color: #374151;
        transition: background-color 0.2s;
    }

        .btn:hover {
            background-color: #f3f4f6;
        }

    .btn-primary {
        background-color: #4f46e5;
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background-color: #4338ca;
        }

    .divider {
        display: flex;
        align-items: center;
        text-align: center;
        margin: 1.5rem 0;
    }

        .divider::before,
        .divider::after {
            content: '';
            flex: 1;
            border-bottom: 1px solid #d1d5db;
        }

        .divider span {
            padding: 0 1rem;
            color: #6b7280;
            font-size: 0.875rem;
        }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: #374151;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #d1d5db;
        border-radius: 4px;
        font-size: 0.875rem;
    }

        .form-control:focus {
            outline: none;
            border-color: #4f46e5;
            box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
        }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .form-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 1rem 0;
    }

    .link {
        color: #4f46e5;
        text-decoration: none;
    }

        .link:hover {
            text-decoration: underline;
        }

    .error-message {
        background-color: #fee2e2;
        border-left: 4px solid #ef4444;
        padding: 1rem;
        margin: 1rem 0;
        color: #991b1b;
        font-size: 0.875rem;
    }

    .validation-message {
        color: #dc2626;
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }
</style>

<div class="login-container">
    <div class="login-box">
        <div class="text-center">
            <h2>Sign in to your account</h2>
            <p>
                <a href="/signup" class="link">Or create a new account</a>
            </p>
        </div>

        <div class="social-buttons">
            <button @onclick="SignInWithGoogle" class="btn">
                <img src="images/google.png" alt="Google" style="height: 20px; margin-right: 8px;" />
                Sign in with Google
            </button>

            <button @onclick="SignInWithFacebook" class="btn">
                <img src="images/facebook.png" alt="Facebook" style="height: 20px; margin-right: 8px;" />
                Sign in with Facebook
            </button>
        </div>

        <div class="divider">
            <span>Or continue with</span>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label class="form-label">Email address</label>
                <InputText @bind-Value="loginModel.Email" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
            </div>

            <div class="form-group">
                <label class="form-label">Password</label>
                <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
            </div>

            <div class="form-row">
                <div class="form-check">
                    <InputCheckbox @bind-Value="loginModel.RememberMe" />
                    <label>Remember me</label>
                </div>

                <a href="/forgot-password" class="link">Forgot password?</a>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }

            <button type="submit" class="btn btn-primary">Sign in</button>
        </EditForm>
    </div>
</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private LoginViewModel loginModel = new();
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            if (loginModel.ValidateLogin())
            {
                // Mock successful login
                errorMessage = null;
                NavigationManager.NavigateTo("/"); // Navigate to home page after successful login
            }
            else
            {
                errorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login";
        }
    }

    private async Task SignInWithGoogle()
    {
        try
        {
            // Add your Google sign-in logic here
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Google sign-in failed";
        }
    }

    private async Task SignInWithFacebook()
    {
        try
        {
            // Add your Facebook sign-in logic here
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Facebook sign-in failed";
        }
    }
}