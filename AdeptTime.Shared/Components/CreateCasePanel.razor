@using AdeptTime.Shared.Models
@using AdeptTime.Shared.Interfaces
@using AdeptTime.Shared.Services
@inject ISaegsService SaegsService
@inject ICaseService CaseService
@inject UserRoleService UserRoleService

<div class="create-case-overlay @(IsVisible ? "visible" : "")">
    <div class="create-case-panel @(IsVisible ? "open" : "")">
        <!-- Step Progress Header -->
        <div class="step-progress">
            <div class="step @(currentStep == 1 ? "active" : "") @(currentStep > 1 ? "completed" : "")">
                <div class="step-number">@(currentStep > 1 ? "✓" : "1")</div>
                <div class="step-dots">............</div>
            </div>
            <div class="step @(currentStep == 2 ? "active" : "") @(currentStep > 2 ? "completed" : "")">
                <div class="step-number">@(currentStep > 2 ? "✓" : "2")</div>
                <div class="step-dots">............</div>
            </div>
            <div class="step @(currentStep == 3 ? "active" : "")">
                <div class="step-number">3</div>
            </div>
        </div>

        <!-- Step Titles -->
        <div class="step-titles">
            <div class="step-title @(currentStep == 1 ? "active" : "")">Tilføj kunde</div>
            <div class="step-title @(currentStep == 2 ? "active" : "")">Sags Info</div>
            <div class="step-title @(currentStep == 3 ? "active" : "")">Planlæg sag</div>
        </div>

        <div class="panel-content">
            @if (currentStep == 1)
            {
                <!-- Step 1: Customer Selection -->
                <div class="form-group">
                    <label for="customer">Kunde <span class="required">(required)</span></label>
                    <select id="customer" @bind="selectedCustomerId" class="form-select">
                        <option value="0">Tilføj kunde</option>
                        @foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="status">Status</label>
                    <select id="status" @bind="selectedStatus" class="form-select">
                        <option value="Ny">Ny</option>
                        <option value="Igangværende">Igangværende</option>
                        <option value="Afsluttet">Afsluttet</option>
                    </select>
                </div>
            }
            else if (currentStep == 2)
            {
                <!-- Step 2: Case Information -->
                <div class="form-group">
                    <label for="employee">Medarbejder</label>
                    <select id="employee" @bind="selectedEmployeeId" class="form-select">
                        <option value="0">Tilføj kontaktperson</option>
                        @foreach (var employee in Employees)
                        {
                            <option value="@employee.Id">@employee.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="department">Afdeling</label>
                    <select id="department" @bind="newCase.Department" class="form-select">
                        <option value="">Tilføj afdeling</option>
                        <option value="VVS">VVS</option>
                        <option value="El">El</option>
                        <option value="Tømrer">Tømrer</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="contact-person">Kontaktperson</label>
                    <select id="contact-person" class="form-select">
                        <option value="">Tilføj kontaktperson</option>
                        <option value="Lars Hansen">Lars Hansen</option>
                        <option value="Peter Nielsen">Peter Nielsen</option>
                    </select>
                </div>

                <!-- Geofence Area Section -->
                <div class="form-group">
                    <label for="geofence-address">Geofence område</label>
                    <input type="text" 
                           id="geofence-address" 
                           @bind="geofenceAddress" 
                           @bind:event="onchange"
                           class="form-input" 
                           placeholder="Indtast adresse for geofence område..." />
                </div>

                <div class="geofence-map-container">
                    <div class="map-header">
                        <span>Geofence område</span>
                        <div class="radius-controls">
                            <button type="button" class="radius-btn" @onclick="DecreaseRadius">-</button>
                            <span class="radius-display">@geofenceRadius m</span>
                            <button type="button" class="radius-btn" @onclick="IncreaseRadius">+</button>
                        </div>
                    </div>
                    <div class="map-placeholder" style="height: 250px; background: @GetMapBackground();">
                        <div class="map-center">
                            <div class="location-pin" style="color: @GetPinColor();">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <div class="geofence-circle" style="width: @(Math.Min(geofenceRadius / 2, 150))px; height: @(Math.Min(geofenceRadius / 2, 150))px; border-color: @GetCircleColor();"></div>
                        </div>
                        <div class="map-info">
                            <div class="address-display">@(!string.IsNullOrEmpty(geofenceAddress) ? geofenceAddress : "Indtast adresse for at vise på kort")</div>
                            <div class="radius-info">Radius: @geofenceRadius meter | Koordinater: @geofenceLat.ToString("F4"), @geofenceLng.ToString("F4")</div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" @bind="addLater" />
                        <span class="checkmark"></span>
                        Tilføj senere
                    </label>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="start-date">Start dato <span class="required">*</span></label>
                        <input type="date" 
                               id="start-date" 
                               @bind="startDate" 
                               class="form-input" />
                    </div>
                    <div class="form-group">
                        <label for="end-date">Slut dato <span class="required">*</span></label>
                        <input type="date" 
                               id="end-date" 
                               @bind="endDate" 
                               class="form-input" />
                    </div>
                </div>

            }
            else if (currentStep == 3)
            {
                <!-- Step 3: Plan Case -->
                <div class="form-group">
                    <label for="location">Lokation for opgaven</label>
                    <input type="text" id="location" @bind="caseLocation" placeholder="Tilføj adresse" class="form-input" />
                </div>

                <div class="form-group">
                    <label for="geofence">Tilføj geofence regel</label>
                    <select id="geofence" @bind="selectedGeofence" class="form-select">
                        <option value="">Tilføj geofence</option>
                        <option value="Office Area">Office Area</option>
                        <option value="Construction Site">Construction Site</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="time-total">Time total</label>
                    <input type="text" id="time-total" @bind="totalTime" placeholder="Tilføj time total" class="form-input" />
                </div>

                <div class="form-group">
                    <label for="documentation">Upload dokumentation</label>
                    <div class="upload-area">
                        <button type="button" class="upload-btn">
                            <i class="fas fa-upload"></i>
                            Upload
                        </button>
                    </div>
                </div>

                <div class="form-group">
                    <label for="description">Beskrivelse <span class="required">(required)</span></label>
                    <textarea id="description" @bind="newCase.Description" placeholder="Tilføj beskrivelse" rows="4" class="form-textarea"></textarea>
                </div>

                <div class="form-group">
                    <label for="comment">Kommentar</label>
                    <textarea id="comment" @bind="newCase.Comment" placeholder="Tilføj kommentar" rows="3" class="form-textarea"></textarea>
                </div>
            }
        </div>

        <div class="panel-footer">
            <button class="btn-secondary" @onclick="ClosePanel">Cancel</button>
            @if (currentStep < 3)
            {
                <button class="btn-primary" @onclick="NextStep">Næste</button>
            }
            else
            {
                <button class="btn-primary" @onclick="CreateCase">Planlæg sag</button>
            }
        </div>
    </div>
</div>

<style>
    .create-case-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        visibility: hidden;
        opacity: 0;
        transition: all 0.3s ease;
        z-index: 1000;
    }

    .create-case-overlay.visible {
        visibility: visible;
        opacity: 1;
    }

    .create-case-panel {
        position: fixed;
        top: 0;
        right: -420px;
        width: 420px;
        height: 100vh;
        background: white;
        box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        transition: right 0.3s ease;
        display: flex;
        flex-direction: column;
        z-index: 1001;
    }

    .create-case-panel.open {
        right: 0;
    }

    /* Step Progress */
    .step-progress {
        padding: 24px 24px 0 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0;
    }

    .step {
        display: flex;
        align-items: center;
        color: #9ca3af;
    }

    .step.active {
        color: #6366f1;
    }

    .step.completed {
        color: #6366f1;
    }

    .step-number {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: 2px solid currentColor;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        font-weight: 600;
        background: white;
    }

    .step.completed .step-number {
        background: #6366f1;
        color: white;
        border-color: #6366f1;
    }

    .step-dots {
        margin: 0 8px;
        color: #e5e7eb;
        font-size: 12px;
        letter-spacing: 2px;
    }

    .step:last-child .step-dots {
        display: none;
    }

    /* Step Titles */
    .step-titles {
        padding: 16px 24px 24px 24px;
        display: flex;
        justify-content: space-between;
        text-align: center;
    }

    .step-title {
        flex: 1;
        font-size: 14px;
        color: #6b7280;
        font-weight: 500;
    }

    .step-title.active {
        color: #111827;
        font-weight: 600;
    }

    .panel-content {
        flex: 1;
        padding: 0 24px 24px 24px;
        overflow-y: auto;
    }

    /* Form Elements */
    .form-group {
        margin-bottom: 20px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-size: 14px;
        font-weight: 500;
        color: #374151;
    }

    .required {
        color: #9ca3af;
        font-weight: 400;
    }

    .form-select,
    .form-input,
    .form-textarea {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #d1d5db;
        border-radius: 8px;
        font-size: 14px;
        background: white;
        color: #6b7280;
        transition: border-color 0.2s ease;
    }

    .form-select:focus,
    .form-input:focus,
    .form-textarea:focus {
        outline: none;
        border-color: #6366f1;
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .form-textarea {
        resize: vertical;
        font-family: inherit;
    }

    .date-select {
        color: #374151;
    }

    /* Checkbox */
    .checkbox-label {
        display: flex;
        align-items: center;
        cursor: pointer;
        font-size: 14px;
        color: #374151;
        margin-bottom: 0;
    }

    .checkbox-label input[type="checkbox"] {
        width: 18px;
        height: 18px;
        margin-right: 8px;
        accent-color: #6366f1;
    }

    /* Action Button */
    .action-button-container {
        margin: 20px 0;
    }

    .btn-schedule {
        padding: 12px 20px;
        background: #8b5cf6;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.2s ease;
    }

    .btn-schedule:hover {
        background: #7c3aed;
    }

    .geofence-map-container {
        margin: 20px 0;
        border: 1px solid #e1e5e9;
        border-radius: 8px;
        overflow: hidden;
    }

    .map-header {
        background: #f8f9fa;
        padding: 12px 16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #e1e5e9;
        font-weight: 600;
        color: #374151;
    }

    .radius-controls {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .radius-btn {
        width: 30px;
        height: 30px;
        border: 1px solid #e1e5e9;
        border-radius: 6px;
        background: white;
        color: #374151;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .radius-btn:hover {
        background: #f8f9fa;
        border-color: #938fbf;
    }

    .radius-display {
        font-size: 14px;
        color: #6c757d;
        min-width: 60px;
        text-align: center;
    }

    .map-placeholder {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        transition: all 0.5s ease;
    }

    .map-center {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .location-pin {
        position: absolute;
        z-index: 10;
        color: #dc3545;
        font-size: 24px;
        filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
    }

    .geofence-circle {
        border: 3px solid rgba(220, 53, 69, 0.4);
        border-radius: 50%;
        background: rgba(220, 53, 69, 0.1);
        position: absolute;
        transition: all 0.3s ease;
        min-width: 50px;
        min-height: 50px;
        max-width: 200px;
        max-height: 200px;
    }

    .map-info {
        position: absolute;
        bottom: 12px;
        left: 12px;
        right: 12px;
        background: rgba(255, 255, 255, 0.95);
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 12px;
        color: #374151;
    }

    .address-display {
        font-weight: 600;
        margin-bottom: 2px;
    }

    .radius-info {
        color: #6c757d;
        font-size: 11px;
    }

    /* Upload */
    .upload-area {
        border: 2px dashed #d1d5db;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        background: #f9fafb;
    }

    .upload-btn {
        padding: 8px 16px;
        background: white;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        font-size: 14px;
        color: #374151;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.2s ease;
    }

    .upload-btn:hover {
        background: #f3f4f6;
    }

    /* Footer */
    .panel-footer {
        padding: 24px;
        border-top: 1px solid #e5e7eb;
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        background: white;
    }

    .btn-primary,
    .btn-secondary {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-primary {
        background: #938FBF;
        color: white;
    }

    .btn-primary:hover {
        background: #7A75A8;
    }

    .btn-secondary {
        background: white;
        color: #374151;
        border: 1px solid #d1d5db;
    }

    .btn-secondary:hover {
        background: #f9fafb;
    }

    @@media (max-width: 768px) {
        .create-case-panel {
            width: 100%;
            right: -100%;
        }
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Case> OnCaseCreated { get; set; }
    [Parameter] public List<Customer> Customers { get; set; } = new();
    [Parameter] public List<Employee> Employees { get; set; } = new();

    private Case newCase = new();
    private int selectedCustomerId = 0;
    private int selectedEmployeeId = 0;
    private string selectedStatus = "Ny";
    private string caseLocation = "";
    private string selectedGeofence = "";
    private string totalTime = "";
    private bool addLater = false;
    private bool scheduleLater = false;
    private int currentStep = 1;
    
    // Geofence properties
    private string _geofenceAddress = "";
    private string geofenceAddress 
    { 
        get => _geofenceAddress; 
        set 
        { 
            _geofenceAddress = value;
            Console.WriteLine($"[CreateCase] Geofence address updated: {value}");
            
            // Update map coordinates based on address (demo locations)
            UpdateMapCoordinates(value);
            StateHasChanged();
        } 
    }
    private int geofenceRadius = 100; // Default 100 meters
    private double geofenceLat = 55.6761; // Copenhagen default
    private double geofenceLng = 12.5683;
    
    // Date properties
    private DateTime startDate = DateTime.Today;
    private DateTime endDate = DateTime.Today.AddDays(7);

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            ResetForm();
        }
    }

    private void ResetForm()
    {
        newCase = new Case
        {
            CaseNumber = $"SAG-{DateTime.Now:yyyy}-{Random.Shared.Next(1000, 9999):0000}",
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(7),
            Status = CaseStatus.Pending,
            CompletedHours = 0
        };
        
        // Reset date inputs
        startDate = DateTime.Today;
        endDate = DateTime.Today.AddDays(7);
        selectedCustomerId = 0;
        selectedEmployeeId = 0;
        selectedStatus = "Ny";
        caseLocation = "";
        selectedGeofence = "";
        totalTime = "";
        addLater = false;
        scheduleLater = false;
        currentStep = 1;
    }

    private void NextStep()
    {
        if (currentStep < 3)
        {
            currentStep++;
        }
        else if (currentStep == 2)
        {
            // From step 2, "Opret sag" should create the case
            CreateCase();
        }
    }

    private async Task ClosePanel()
    {
        await OnClose.InvokeAsync();
    }

    private async Task CreateCase()
    {
        try
        {
            // Map UI status to database status
            var dbStatus = selectedStatus switch
            {
                "Igangværende" => "I gang", // Fix the status mapping
                "Afsluttet" => "Færdig",
                _ => selectedStatus // "Ny", "Afventer" stay the same
            };

            // Create new CaseModel for database
            var newDatabaseCase = new CaseModel
            {
                CaseNumber = newCase.CaseNumber,
                Title = newCase.Description, // Use description as title for now
                Description = newCase.Description,
                CustomerId = selectedCustomerId > 0 ? selectedCustomerId : null,
                Status = dbStatus,
                Priority = "Medium", // Default priority
                StartDate = startDate,
                EndDate = endDate,
                EstimatedHours = int.TryParse(totalTime, out var hours) ? hours : null,
                CompletedHours = 0,
                
                // Geofence data from Step 2
                GeofenceAddress = geofenceAddress,
                GeofenceLatitude = (decimal)geofenceLat,
                GeofenceLongitude = (decimal)geofenceLng,
                GeofenceRadius = geofenceRadius,
                
                // Set creator (get current user ID - for demo use first available)
                CreatedBy = Guid.NewGuid(), // In real app: get from UserRoleService
                AssignedTo = selectedEmployeeId > 0 ? Guid.NewGuid() : null // In real app: map employee ID to user ID
            };

            // Save to database via CaseService
            var savedCase = await CaseService.CreateCaseAsync(newDatabaseCase);
            Console.WriteLine($"✅ Case saved to database: {savedCase.CaseNumber} with geofence: {savedCase.GeofenceAddress}");

            // Convert back to old Case model for compatibility
            if (selectedCustomerId > 0)
            {
                newCase.Customer = Customers.FirstOrDefault(c => c.Id == selectedCustomerId) ?? new Customer();
            }

            if (selectedEmployeeId > 0)
            {
                newCase.AssignedEmployee = Employees.FirstOrDefault(e => e.Id == selectedEmployeeId) ?? new Employee();
            }

            newCase.Status = selectedStatus switch
            {
                "Ny" => CaseStatus.Pending,
                "Igangværende" => CaseStatus.Badges,
                "Afsluttet" => CaseStatus.Review,
                _ => CaseStatus.Pending
            };

            newCase.TotalHours = hours;
            newCase.StartDate = startDate;
            newCase.EndDate = endDate;

            // Also use the old service for backward compatibility
            var addedCase = await SaegsService.AddCaseAsync(newCase);
            
            await OnCaseCreated.InvokeAsync(addedCase);
            await ClosePanel();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error creating case: {ex.Message}");
        }
    }


    private void IncreaseRadius()
    {
        if (geofenceRadius < 500)
        {
            geofenceRadius += 25;
            Console.WriteLine($"[CreateCase] Geofence radius increased to: {geofenceRadius}m");
            StateHasChanged();
        }
    }

    private void DecreaseRadius()
    {
        if (geofenceRadius > 25)
        {
            geofenceRadius -= 25;
            Console.WriteLine($"[CreateCase] Geofence radius decreased to: {geofenceRadius}m");
            StateHasChanged();
        }
    }

    private void UpdateMapCoordinates(string address)
    {
        // Simple geocoding for demo - in real app use Google Maps API
        var lowerAddress = address.ToLower();
        
        if (lowerAddress.Contains("copenhagen") || lowerAddress.Contains("københavn"))
        {
            geofenceLat = 55.6761;
            geofenceLng = 12.5683;
            Console.WriteLine($"[CreateCase] Map moved to Copenhagen: {geofenceLat}, {geofenceLng}");
        }
        else if (lowerAddress.Contains("vesterbro"))
        {
            geofenceLat = 55.6684;
            geofenceLng = 12.5588;
            Console.WriteLine($"[CreateCase] Map moved to Vesterbro: {geofenceLat}, {geofenceLng}");
        }
        else if (lowerAddress.Contains("nørrebro"))
        {
            geofenceLat = 55.6867;
            geofenceLng = 12.5700;
            Console.WriteLine($"[CreateCase] Map moved to Nørrebro: {geofenceLat}, {geofenceLng}");
        }
        else if (lowerAddress.Contains("østerbro"))
        {
            geofenceLat = 55.7058;
            geofenceLng = 12.5691;
            Console.WriteLine($"[CreateCase] Map moved to Østerbro: {geofenceLat}, {geofenceLng}");
        }
        else if (lowerAddress.Contains("frederiksberg"))
        {
            geofenceLat = 55.6736;
            geofenceLng = 12.5348;
            Console.WriteLine($"[CreateCase] Map moved to Frederiksberg: {geofenceLat}, {geofenceLng}");
        }
        else if (lowerAddress.Contains("amager"))
        {
            geofenceLat = 55.6586;
            geofenceLng = 12.5912;
            Console.WriteLine($"[CreateCase] Map moved to Amager: {geofenceLat}, {geofenceLng}");
        }
        else if (!string.IsNullOrEmpty(address))
        {
            // Default to central Copenhagen for unknown addresses
            geofenceLat = 55.6761;
            geofenceLng = 12.5683;
            Console.WriteLine($"[CreateCase] Unknown address, defaulting to Copenhagen center: {geofenceLat}, {geofenceLng}");
        }
    }

    private string GetMapBackground()
    {
        var lowerAddress = geofenceAddress.ToLower();
        
        if (lowerAddress.Contains("vesterbro"))
            return "linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)"; // Red for Vesterbro
        else if (lowerAddress.Contains("nørrebro"))
            return "linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)"; // Blue for Nørrebro
        else if (lowerAddress.Contains("østerbro"))
            return "linear-gradient(135deg, #55a3ff 0%, #003d82 100%)"; // Dark blue for Østerbro
        else if (lowerAddress.Contains("frederiksberg"))
            return "linear-gradient(135deg, #fd79a8 0%, #e84393 100%)"; // Pink for Frederiksberg
        else if (lowerAddress.Contains("amager"))
            return "linear-gradient(135deg, #fdcb6e 0%, #e17055 100%)"; // Orange for Amager
        else if (lowerAddress.Contains("copenhagen") || lowerAddress.Contains("københavn"))
            return "linear-gradient(135deg, #00b894 0%, #00cec9 100%)"; // Teal for Copenhagen
        else
            return "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"; // Default purple
    }

    private string GetPinColor()
    {
        return string.IsNullOrEmpty(geofenceAddress) ? "#6c757d" : "#dc3545";
    }

    private string GetCircleColor()
    {
        return string.IsNullOrEmpty(geofenceAddress) ? "rgba(108, 117, 125, 0.4)" : "rgba(220, 53, 69, 0.4)";
    }
} 