@page "/sager"
@using AdeptTime.Shared.Models
@using AdeptTime.Shared.Components
@using AdeptTime.Shared.Interfaces
@using AdeptTime.Shared.Services
@inject ISaegsService SaegsService
@inject ICaseService CaseService
@inject ITeamService TeamDataService
@inject TeamSelectionService TeamService
@inject NavigationManager Navigation
@inject UserRoleService UserRoleService

<PageTitle>Sager</PageTitle>

<AuthRedirect RequireAuth="true">
<div class="sager-container">
    <!-- Main Header using new PageHeader component -->
    <PageHeader 
        Title="Sager"
        ShowSearchInput="false"
        CreateButtonText="Opret"
        OnFilterClicked="HandleFilterClick"
        OnCreateOptionSelected="HandleCreateOptionSelected" />
    
    <!-- Secondary Filter Bar -->
    <div class="filter-bar">
        <div class="filter-left">
            <div class="filter-group">
                <select class="filter-select" @bind="selectedStatus">
                    <option value="">Status</option>
                    <option value="Badges">Badges</option>
                    <option value="Pending">Pending</option>
                    <option value="Review">Review</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>
            <div class="filter-group date-picker-container">
                <input type="text" class="date-range-single" @bind="dateRangeText" placeholder="Vælg periode..." 
                       @onclick="ToggleDatePicker" readonly />
                @if (showDatePicker)
                {
                    <div class="date-picker-dropdown">
                        <div class="date-picker-header">
                            <span>Vælg periode</span>
                            <button class="close-btn" @onclick="CloseDatePicker">×</button>
                        </div>
                        <div class="date-inputs">
                            <div class="date-field">
                                <label>Fra:</label>
                                <input type="date" @bind="fromDate" @bind:event="oninput" />
                            </div>
                            <div class="date-field">
                                <label>Til:</label>
                                <input type="date" @bind="toDate" @bind:event="oninput" />
                            </div>
                        </div>
                        <div class="date-picker-actions">
                            <button class="apply-btn" @onclick="ApplyDateRange">Anvend</button>
                        </div>
                    </div>
                }
            </div>
            <div class="filter-group">
                <div class="search-input-wrapper small">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" placeholder="Search anything..." class="search-input small" @bind="tableSearchQuery" />
                </div>
            </div>
        </div>
        <div class="filter-right">
        </div>
    </div>

    <!-- Main Content Container -->
    <div class="content-container @(isCreatePanelVisible || isCaseDetailVisible ? "panel-open" : "")">
        <!-- Case Table -->
        <CaseTable Cases="FilteredCases" OnCaseSelected="HandleCaseSelected" />
    </div>

    <!-- Create Case Panel -->
    <CreateCasePanel 
        IsVisible="isCreatePanelVisible"
        OnClose="CloseCreatePanel"
        OnCaseCreated="HandleCaseCreated"
        Customers="customers"
        Employees="employees" />

    <!-- Employee Invite Panel -->
    <EmployeeInvitePanel 
        IsVisible="isEmployeeInvitePanelVisible"
        OnClose="CloseEmployeeInvitePanel"
        OnEmployeeInvited="HandleEmployeeInvited" />

    <!-- Add Hours Panel -->
    <AddHoursPanel 
        IsVisible="isAddHoursPanelVisible"
        OnClose="CloseAddHoursPanel"
        OnHoursSubmitted="HandleHoursSubmitted" />

    <!-- Case Detail View -->
    <CaseDetailView 
        IsVisible="isCaseDetailVisible"
        SelectedCase="selectedCase"
        OnClose="CloseCaseDetail" />
</div>
</AuthRedirect>

<style>
    .sager-container {
        background-color: #f8f9fa;
        min-height: 100vh;
        padding: 0;
        position: relative;
    }

    .content-container {
        transition: margin-right 0.3s ease;
        margin-right: 0;
    }

    .content-container.panel-open {
        margin-right: 400px;
    }

    .filter-bar {
        background: white;
        padding: 16px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #e9ecef;
        gap: 20px;
    }

    .filter-left, .filter-right {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .filter-group {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .search-input-wrapper {
        position: relative;
        display: flex;
        align-items: center;
    }

    .search-input-wrapper.small {
        max-width: 200px;
    }

    .search-icon {
        position: absolute;
        left: 12px;
        color: #6c757d;
        font-size: 14px;
        z-index: 1;
    }

    .search-input {
        padding: 10px 12px 10px 36px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        font-size: 14px;
        width: 300px;
        background: #f8f9fa;
    }

    .search-input.small {
        width: 200px;
        padding: 8px 10px 8px 32px;
    }

    .search-input:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .filter-select {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        background: white;
        cursor: pointer;
        min-width: 120px;
    }

    .date-picker-btn {
        padding: 8px 10px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        background: white;
        cursor: pointer;
        color: #6c757d;
        font-size: 12px;
    }

    .date-picker-container {
        position: relative;
    }

    .date-range-single {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        background: white;
        cursor: pointer;
        min-width: 200px;
        color: #495057;
        width: 100%;
    }

    .date-range-single:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .date-picker-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        background: white;
        border: 1px solid #ced4da;
        border-radius: 8px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        margin-top: 4px;
        padding: 20px;
        min-width: 350px;
        max-width: 400px;
    }

    .date-picker-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 16px;
        font-weight: 600;
        color: #495057;
        margin-bottom: 16px;
        padding-bottom: 8px;
        border-bottom: 1px solid #e9ecef;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        color: #6c757d;
        padding: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-btn:hover {
        color: #495057;
        background: #f8f9fa;
        border-radius: 50%;
    }

    .date-inputs {
        display: flex;
        gap: 16px;
        margin-bottom: 16px;
    }

    .date-field {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .date-field label {
        font-size: 12px;
        color: #6c757d;
        font-weight: 500;
    }

    .date-field input {
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.2s ease;
    }

    .date-field input:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .date-picker-actions {
        display: flex;
        justify-content: flex-end;
        padding-top: 12px;
        border-top: 1px solid #e9ecef;
    }

    .apply-btn {
        background: #007bff;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .apply-btn:hover {
        background: #0056b3;
    }

    @@media (max-width: 768px) {
        .content-container.panel-open {
            margin-right: 0;
        }
        
        .filter-bar {
            flex-direction: column;
            gap: 16px;
            align-items: flex-start;
        }

        .filter-left, .filter-right {
            width: 100%;
            justify-content: space-between;
        }
    }
</style>

@code {
    private string tableSearchQuery = "";
    private string selectedStatus = "";
    private DateTime fromDate = new DateTime(2024, 1, 1);
    private DateTime toDate = new DateTime(2024, 12, 31);
    private bool showDatePicker = false;
    private string dateRangeText = "";
    private bool isCreatePanelVisible = false;
    private bool isEmployeeInvitePanelVisible = false;
    private bool isAddHoursPanelVisible = false;
    private bool isCaseDetailVisible = false;
    private Case? selectedCase = null;

    private List<Case> cases = new();
    private List<CaseModel> databaseCases = new();
    private List<Team> availableTeams = new();
    private List<Customer> customers = new();
    private List<Employee> employees = new();
    private string _selectedTeamId = "";

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to case changes
        SaegsService.OnCasesChanged += OnCasesChanged;
        
        // Subscribe to team changes
        TeamService.OnTeamChanged += HandleTeamSelectionChanged;
        
        // Load initial data
        await LoadData();
        await LoadTeamsAsync();
        await LoadCasesFromDatabaseAsync();
        UpdateDateRange();
    }

    private async void HandleTeamSelectionChanged(string selectedTeam)
    {
        Console.WriteLine($"[Sager] Sidebar team selection changed to: {selectedTeam}");
        
        // Convert team name to team ID for our filter
        if (selectedTeam == "All")
        {
            _selectedTeamId = "";
        }
        else
        {
            var team = availableTeams.FirstOrDefault(t => t.Name == selectedTeam);
            _selectedTeamId = team?.Id.ToString() ?? "";
        }
        
        // Reload cases with new filter
        await LoadCasesFromDatabaseAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadTeamsAsync()
    {
        try
        {
            availableTeams = await TeamDataService.GetAllTeamsAsync();
            Console.WriteLine($"[Sager] Loaded {availableTeams.Count} teams");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Sager] Failed to load teams: {ex.Message}");
            availableTeams = new List<Team>();
        }
    }

    private async Task LoadCasesFromDatabaseAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(_selectedTeamId) && Guid.TryParse(_selectedTeamId, out var teamId))
            {
                // Load by specific team
                databaseCases = await CaseService.GetCasesByTeamAsync(teamId);
                Console.WriteLine($"[Sager] Loaded {databaseCases.Count} cases for team {teamId}");
            }
            else
            {
                // Load all cases
                databaseCases = await CaseService.GetAllCasesAsync();
                Console.WriteLine($"[Sager] Loaded {databaseCases.Count} cases (all teams)");
            }

            // Convert CaseModel to Case for UI compatibility
            cases = databaseCases.Select(dbCase => new Case
            {
                Id = (int)dbCase.Id.GetHashCode(),
                CaseNumber = dbCase.CaseNumber,
                Description = dbCase.Description ?? "",
                Comment = "",
                Customer = new Customer 
                { 
                    Id = dbCase.CustomerId ?? 0, 
                    Name = GetCustomerName(dbCase.CustomerId ?? 0) 
                },
                AssignedEmployee = new Employee 
                { 
                    Id = (int)(dbCase.AssignedTo?.GetHashCode() ?? 0),
                    Name = dbCase.AssignedToUser?.Name ?? "Ikke tildelt",
                    AvatarUrl = dbCase.AssignedToUser?.AvatarUrl ?? "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHhzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D",
                    Team = dbCase.Team?.Name ?? "Unknown",
                    UserType = dbCase.AssignedToUser?.UserTypeId == 1 ? "Administrator" : "Worker"
                },
                Manager = new Employee 
                { 
                    Id = (int)(dbCase.CreatedBy?.GetHashCode() ?? 0),
                    Name = dbCase.CreatedByUser?.Name ?? "Unknown",
                    AvatarUrl = dbCase.CreatedByUser?.AvatarUrl ?? "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHhzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D",
                    Team = dbCase.Team?.Name ?? "Unknown",
                    UserType = dbCase.CreatedByUser?.UserTypeId == 1 ? "Administrator" : "Worker"
                },
                Department = dbCase.Team?.Name ?? "Unknown",
                CompletedHours = dbCase.CompletedHours,
                TotalHours = dbCase.EstimatedHours ?? 0,
                StartDate = dbCase.StartDate ?? DateTime.Today,
                EndDate = dbCase.EndDate ?? DateTime.Today.AddDays(7),
                Status = dbCase.CaseStatus,
                AttachmentCount = 0
            }).ToList();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Sager] Failed to load cases: {ex.Message}");
            databaseCases = new List<CaseModel>();
            cases = new List<Case>();
        }
    }

    private string GetCustomerName(int customerId)
    {
        return customerId switch
        {
            1 => "VVS Hansen ApS",
            2 => "Elektro Nielsen A/S", 
            3 => "Byg & Co",
            _ => "Unknown Customer"
        };
    }

    private async Task LoadData()
    {
        cases = await SaegsService.GetCasesAsync();
        customers = await SaegsService.GetCustomersAsync();
        employees = await SaegsService.GetEmployeesAsync();
        StateHasChanged();
    }

    private async void OnCasesChanged()
    {
        // Reload cases when they change
        cases = await SaegsService.GetCasesAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SaegsService.OnCasesChanged -= OnCasesChanged;
        TeamService.OnTeamChanged -= HandleTeamSelectionChanged;
    }



    private void InitializeEmployees()
    {
        employees = new List<Employee>
        {
            new Employee { Id = 1, Name = "James Carter", Team = "Team London", AvatarUrl = "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHhzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 2, Name = "Liam Anders", Team = "Team London", AvatarUrl = "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHhzZWFyY2h8Mnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 3, Name = "Noah Bennett", Team = "Team London", AvatarUrl = "https://images.unsplash.com/photo-1531746020798-e6953c6e8e04?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHhzZWFyY2h8Nnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" }
        };
    }

    private void InitializeCases()
    {
        cases = new List<Case>
        {
            new Case
            {
                Id = 1,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 139,
                TotalHours = 300,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 2
            },
            new Case
            {
                Id = 2,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 84,
                TotalHours = 84,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Pending,
                AttachmentCount = 4
            },
            new Case
            {
                Id = 3,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 38,
                TotalHours = 38,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Review,
                AttachmentCount = 2
            },
            new Case
            {
                Id = 4,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 84,
                TotalHours = 84,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 4
            },
            new Case
            {
                Id = 5,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 38,
                TotalHours = 38,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 2
            },
            new Case
            {
                Id = 6,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 84,
                TotalHours = 84,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 4
            },
            new Case
            {
                Id = 7,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 38,
                TotalHours = 38,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 2
            },
            new Case
            {
                Id = 8,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 84,
                TotalHours = 84,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 4
            },
            new Case
            {
                Id = 9,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 38,
                TotalHours = 38,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 2
            },
            new Case
            {
                Id = 10,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 84,
                TotalHours = 84,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 4
            },
            new Case
            {
                Id = 11,
                CaseNumber = "SAG-2025-0012",
                Description = "Renovering af badeværelse - montering af fliser og VVS-arbejde",
                Comment = "Materialer bestilt - forventet levering fredag.",
                Customer = customers[0],
                AssignedEmployee = employees[0],
                Manager = employees[0],
                Department = "VVS",
                CompletedHours = 38,
                TotalHours = 38,
                StartDate = new DateTime(2022, 1, 22),
                EndDate = new DateTime(2022, 1, 22),
                Status = CaseStatus.Badges,
                AttachmentCount = 2
            }
        };
    }

    private List<Case> FilteredCases
    {
        get
        {
            var filtered = cases.AsEnumerable();

            // Filter by team/department
            if (!TeamService.IsAllTeamsSelected())
            {
                filtered = filtered.Where(c => 
                    c.AssignedEmployee.Team == TeamService.SelectedTeam ||
                    c.Manager.Team == TeamService.SelectedTeam ||
                    c.Department == TeamService.SelectedTeam);
            }

            if (!string.IsNullOrEmpty(selectedStatus) && Enum.TryParse<CaseStatus>(selectedStatus, out var status))
            {
                filtered = filtered.Where(c => c.Status == status);
            }

            if (!string.IsNullOrEmpty(tableSearchQuery))
            {
                filtered = filtered.Where(c => 
                    c.Description.Contains(tableSearchQuery, StringComparison.OrdinalIgnoreCase) ||
                    c.CaseNumber.Contains(tableSearchQuery, StringComparison.OrdinalIgnoreCase) ||
                    c.Customer.Name.Contains(tableSearchQuery, StringComparison.OrdinalIgnoreCase) ||
                    c.AssignedEmployee.Name.Contains(tableSearchQuery, StringComparison.OrdinalIgnoreCase) ||
                    c.Department.Contains(tableSearchQuery, StringComparison.OrdinalIgnoreCase) ||
                    c.Comment.Contains(tableSearchQuery, StringComparison.OrdinalIgnoreCase));
            }

            return filtered.ToList();
        }
    }

    private void OpenCreatePanel()
    {
        isCreatePanelVisible = true;
    }

    private void CloseCreatePanel()
    {
        isCreatePanelVisible = false;
    }

    private void HandleCaseSelected(Case caseItem)
    {
        selectedCase = caseItem;
        isCaseDetailVisible = true;
        isCreatePanelVisible = false; // Close create panel if open
        StateHasChanged();
    }

    private void CloseCaseDetail()
    {
        isCaseDetailVisible = false;
        selectedCase = null;
        StateHasChanged();
    }

    private async Task HandleCaseCreated(Case newCase)
    {
        // Reload cases from database when new case is created
        Console.WriteLine("[Sager] New case created, reloading data from database...");
        await LoadCasesFromDatabaseAsync();
        StateHasChanged();
    }

    // New handler methods for PageHeader events
    private Task HandleFilterClick()
    {
        // TODO: Implement filter functionality
        return Task.CompletedTask;
    }

    private Task HandleCreateOptionSelected(CreateType createType)
    {
        switch (createType)
        {
            case CreateType.Case:
                isCreatePanelVisible = true;
                break;
            case CreateType.Employee:
                isEmployeeInvitePanelVisible = true;
                break;
            case CreateType.Geofence:
                Navigation.NavigateTo("/geofence-create");
                break;
            case CreateType.AddHours:
                isAddHoursPanelVisible = true;
                break;
        }
        return Task.CompletedTask;
    }

    private void CloseEmployeeInvitePanel()
    {
        isEmployeeInvitePanelVisible = false;
    }

    private void CloseAddHoursPanel()
    {
        isAddHoursPanelVisible = false;
    }

    private void HandleEmployeeInvited(Employee newEmployee)
    {
        // Add the new employee to the employees list
        employees.Add(newEmployee);
        StateHasChanged();
    }

    private void HandleHoursSubmitted(List<AddHoursPanel.TimeEntryData> hoursData)
    {
        // In Sager context, we could relate hours to specific cases or log for later processing
        // For now, just log to console
        Console.WriteLine($"Hours submitted from cases page: {hoursData.Count} entries");
        foreach (var entry in hoursData)
        {
            Console.WriteLine($"  - {entry.Date:yyyy-MM-dd}: {entry.TotalHours} hours - {entry.Description}");
        }
        StateHasChanged();
    }

    private void ToggleDatePicker()
    {
        showDatePicker = !showDatePicker;
        StateHasChanged();
    }

    private void CloseDatePicker()
    {
        showDatePicker = false;
        StateHasChanged();
    }

    private async Task ApplyDateRange()
    {
        UpdateDateRange();
        showDatePicker = false;
        
        // Reload cases with new date range
        await LoadCasesFromDatabaseAsync();
        StateHasChanged();
    }

    private void UpdateDateRange()
    {
        dateRangeText = $"{fromDate:dd/MM/yyyy} - {toDate:dd/MM/yyyy}";
        InvokeAsync(StateHasChanged);
    }
} 