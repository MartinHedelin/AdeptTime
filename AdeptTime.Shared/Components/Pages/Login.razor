@page "/login"
@using AdeptTime.Shared.ViewModels
@using AdeptTime.Shared.Interfaces
@using AdeptTime.Shared.Services
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject UserRoleService UserRoleService
@layout AuthLayout

<PageTitle>Login</PageTitle>

<AuthRedirect RequireAuth="false">
<div class="login-container">
    <div class="card login-card">
            <div class="page-header text-center">
                <h1 class="page-title">Welcome Back</h1>
                <p class="page-subtitle">Sign in to your account to continue</p>
            </div>

            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
                </div>

                <div class="form-group form-check-wrapper">
                    <div class="form-check">
                        <InputCheckbox id="remember" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                        <label for="remember" class="form-check-label">Remember me</label>
                    </div>
                    <a href="#" class="forgot-password-link">Forgot password?</a>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-error">
                        @errorMessage
                    </div>
                }

                <button type="submit" class="btn btn-primary btn-full-width" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <span>Sign In</span>
                    }
                </button>
            </EditForm>

            <div class="divider">
                <span>or</span>
            </div>

            <div class="auth-links">
                <p>Don't have an account? <a href="/signup" class="auth-link">Create one here</a></p>
            </div>
        </div>
</div>
</AuthRedirect>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
    }

    .login-card {
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    .form-check-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .form-check-input {
        width: auto;
        margin: 0;
    }

    .form-check-label {
        margin: 0;
        font-size: 0.9rem;
        color: #7f8c8d;
    }

    .forgot-password-link {
        color: #3498db;
        text-decoration: none;
        font-size: 0.9rem;
        transition: color 0.2s ease;
    }

    .forgot-password-link:hover {
        color: #2980b9;
        text-decoration: underline;
    }

    .btn-full-width {
        width: 100%;
        margin-bottom: 1.5rem;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        font-size: 0.9rem;
    }

    .alert-error {
        background-color: #fee2e2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .divider {
        position: relative;
        text-align: center;
        margin: 1.5rem 0;
    }

    .divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background-color: #e9ecef;
    }

    .divider span {
        background-color: white;
        padding: 0 1rem;
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .auth-links {
        text-align: center;
    }

    .auth-links p {
        margin: 0;
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .auth-link {
        color: #3498db;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s ease;
    }

    .auth-link:hover {
        color: #2980b9;
        text-decoration: underline;
    }

    .validation-message {
        color: #dc2626;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    private LoginViewModel loginModel = new();
    private string? errorMessage;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
#if DEBUG
        // Auto-fill for debug mode - use the signup email that was just created
        loginModel.Email = "9ea7b3ac@admin.com"; // Change this to match your signup email
        loginModel.Password = "Test12345678";
        loginModel.RememberMe = true;
#endif
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Handle demo mode when Supabase is not available
            try
            {
                // First check if user exists
                var user = await UserService.GetUserByEmailAsync(loginModel.Email);
                if (user == null)
                {
                    errorMessage = "User not found with that email address";
                    return;
                }

                // Validate password
                bool isValid = await UserService.ValidatePasswordAsync(loginModel.Email, loginModel.Password);

                if (isValid)
                {
                    // Set user role based on database value
                    UserRoleService.SetCurrentUser(loginModel.Email, user.IsAdmin);

                    // Redirect without forcing full reload to preserve in-memory role state
                    NavigationManager.NavigateTo("/", false);
                }
                else
                {
                    errorMessage = "Invalid password for this email address";
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Failed to fetch") || ex.Message.Contains("ERR_CONNECTION_REFUSED"))
                {
                    // Demo mode - simulate login for specific test accounts
                    if ((loginModel.Email == "admin_user@test.com" && loginModel.Password == "Test12345678") ||
                        (loginModel.Email.EndsWith("@admin.com") && loginModel.Password == "Test12345678"))
                    {
                        UserRoleService.SetCurrentUser(loginModel.Email, loginModel.Email.Contains("admin"));
                        NavigationManager.NavigateTo("/", false);
                    }
                    else
                    {
                        errorMessage = "Demo mode: Use admin_user@test.com or any *@admin.com with password Test12345678";
                    }
                }
                else
                {
                    errorMessage = $"Login error: {ex.Message}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
} 