@page "/timeoversigt"
@using AdeptTime.Shared.Models
@using AdeptTime.Shared.Components
@using AdeptTime.Shared.Services
@inject TeamSelectionService TeamService
@inject NavigationManager Navigation
@inject UserRoleService UserRoleService

<PageTitle>Timeoversigt</PageTitle>

<div class="timeoversigt-container">
    <!-- Debug Info Panel -->
    <div style="background: #f0f0f0; padding: 10px; margin: 10px; border-radius: 5px; font-size: 12px; color: #666;">
        <strong>Debug Info:</strong> User: @UserRoleService.CurrentUserEmail | Is Admin: @UserRoleService.IsAdministrator
        <button style="margin-left: 10px; padding: 2px 8px; font-size: 11px;" @onclick="LogCurrentStatus">Log Status</button>
    </div>

    <!-- Main Header using new PageHeader component -->
    <PageHeader 
        Title="Timeoversigt"
        ShowSearchInput="false"
        CreateButtonText="Opret"
        OnFilterClicked="HandleFilterClick"
        OnCreateOptionSelected="HandleCreateOptionSelected" />

    <!-- Secondary Filter Bar -->
    <div class="filter-bar">
        <div class="filter-left">
            <div class="filter-group">
                <select class="filter-select status-picker @GetTopFilterStatusClass()" @bind="selectedStatus">
                    <option value="">Status</option>
                    <option value="Afventer">Afventer</option>
                    <option value="Godkendt">Godkendt</option>
                    <option value="Afvist">Afvist</option>
                </select>
            </div>
            <div class="filter-group">
                <select class="filter-select" @bind="selectedWeek">
                    <option value="42">Week 42</option>
                    <option value="41">Week 41</option>
                    <option value="43">Week 43</option>
                </select>
            </div>
            <div class="filter-group date-picker-container">
                <input type="text" class="date-range-single" @bind="dateRangeText" placeholder="Vælg periode..." 
                       @onclick="ToggleDatePicker" readonly />
                @if (showDatePicker)
                {
                    <div class="date-picker-dropdown">
                        <div class="date-picker-header">
                            <span>Vælg periode</span>
                            <button class="close-btn" @onclick="CloseDatePicker">×</button>
                        </div>
                        <div class="date-inputs">
                            <div class="date-field">
                                <label>Fra:</label>
                                <input type="date" @bind="fromDate" @bind:event="oninput" />
                            </div>
                            <div class="date-field">
                                <label>Til:</label>
                                <input type="date" @bind="toDate" @bind:event="oninput" />
                            </div>
                        </div>
                        <div class="date-picker-actions">
                            <button class="apply-btn" @onclick="ApplyDateRange">Anvend</button>
                        </div>
                    </div>
                }
            </div>

        </div>
        <div class="filter-right">
            <select class="filter-select status-picker @GetBulkStatusClass()" value="@bulkStatus"
                    @onchange="(e) => ChangeBulkStatus(e.Value?.ToString())">
                <option value="Afventer">Afventer</option>
                <option value="Godkendt">Godkendt</option>
                <option value="Afvist">Afvist</option>
            </select>
        </div>
    </div>

    <!-- Main Content Container -->
    <div class="content-container @(isCreatePanelVisible ? "panel-open" : "")">
        <!-- Time Entry Table -->
        <TimeEntryTable @ref="timeEntryTable" TimeEntries="FilteredTimeEntries" OnStatusChanged="HandleStatusChanged" />
    </div>

    <!-- Create Case Panel -->
    <CreateCasePanel 
        IsVisible="isCreatePanelVisible"
        OnClose="CloseCreatePanel"
        OnCaseCreated="HandleCaseCreated"
        Customers="customers"
        Employees="employees" />

    <!-- Employee Invite Panel -->
    <EmployeeInvitePanel 
        IsVisible="isEmployeeInvitePanelVisible"
        OnClose="CloseEmployeeInvitePanel"
        OnEmployeeInvited="HandleEmployeeInvited" />

    <!-- Add Hours Panel -->
    <AddHoursPanel 
        IsVisible="isAddHoursPanelVisible"
        OnClose="CloseAddHoursPanel"
        OnHoursSubmitted="HandleHoursSubmitted" />
</div>

<style>
    .timeoversigt-container {
        background-color: #f8f9fa;
        min-height: 100vh;
        padding: 0;
        position: relative;
    }

    .content-container {
        transition: margin-right 0.3s ease;
        margin-right: 0;
    }

    .content-container.panel-open {
        margin-right: 420px;
    }

    .filter-bar {
        background: white;
        padding: 16px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #e9ecef;
        gap: 20px;
    }

    .filter-left, .filter-right {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .filter-group {
        display: flex;
        align-items: center;
        gap: 8px;
    }



    .filter-select, .status-filter {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        background: white;
        cursor: pointer;
        min-width: 120px;
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="8" viewBox="0 0 12 8"><path d="M6 8L0 2h12z" fill="%23666"/></svg>');
        background-repeat: no-repeat;
        background-position: right 8px center;
        padding-right: 28px;
    }

    .status-picker {
        font-weight: 500;
    }

    .status-picker.pending {
        color: #007bff;
        border-color: #007bff;
        background-color: #f8f9ff;
    }

    .status-picker.approved {
        color: #28a745;
        border-color: #28a745;
        background-color: #f8fff8;
    }

    .status-picker.rejected {
        color: #dc3545;
        border-color: #dc3545;
        background-color: #fff8f8;
    }

    .status-picker:focus {
        outline: none;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }

    .date-picker-container {
        position: relative;
    }

    .date-range-single {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        background: white;
        cursor: pointer;
        min-width: 200px;
        color: #495057;
        width: 100%;
    }

    .date-range-single:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .date-picker-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        background: white;
        border: 1px solid #ced4da;
        border-radius: 8px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        margin-top: 4px;
        padding: 20px;
        min-width: 350px;
        max-width: 400px;
    }

    .date-picker-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 16px;
        font-weight: 600;
        color: #495057;
        margin-bottom: 16px;
        padding-bottom: 8px;
        border-bottom: 1px solid #e9ecef;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        color: #6c757d;
        padding: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-btn:hover {
        color: #495057;
        background: #f8f9fa;
        border-radius: 50%;
    }

    .date-inputs {
        display: flex;
        gap: 16px;
        margin-bottom: 16px;
    }

    .date-field {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .date-field label {
        font-size: 12px;
        color: #6c757d;
        font-weight: 500;
    }

    .date-field input {
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.2s ease;
    }

    .date-field input:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .date-picker-actions {
        display: flex;
        justify-content: flex-end;
        padding-top: 12px;
        border-top: 1px solid #e9ecef;
    }

    .apply-btn {
        background: #007bff;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .apply-btn:hover {
        background: #0056b3;
    }



    @@media (max-width: 768px) {
        .filter-bar {
            flex-direction: column;
            gap: 16px;
            align-items: flex-start;
        }

        .filter-left, .filter-right {
            width: 100%;
            justify-content: space-between;
        }
    }
</style>

@code {
    private TimeEntryTable? timeEntryTable;
    private string? bulkStatus = "Afventer";
    private string selectedStatus = "";
    private string selectedWeek = "42";
    private DateTime fromDate = new DateTime(2022, 1, 22);
    private DateTime toDate = new DateTime(2022, 1, 28);
    private string pendingFilter = "";
    private bool isCreatePanelVisible = false;
    private bool isEmployeeInvitePanelVisible = false;
    private bool isAddHoursPanelVisible = false;
    private bool showDatePicker = false;
    private string dateRangeText = "";

    private List<TimeEntry> timeEntries = new();
    private List<Employee> employees = new();
    private List<Customer> customers = new();

    protected override void OnInitialized()
    {
        InitializeCustomers();
        InitializeEmployees();
        InitializeTimeEntries();
        UpdateDateRange();
        
        // Subscribe to team changes
        TeamService.OnTeamChanged += HandleTeamSelectionChanged;
        
        // Debug: Log current user role status
        Console.WriteLine($"[Timeoversigt] Page loaded - User: {UserRoleService.CurrentUserEmail}, IsAdmin: {UserRoleService.IsAdministrator}");
    }

    private void HandleTeamSelectionChanged(string selectedTeam)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        TeamService.OnTeamChanged -= HandleTeamSelectionChanged;
    }

    private void ToggleDatePicker()
    {
        showDatePicker = !showDatePicker;
        StateHasChanged();
    }

    private void CloseDatePicker()
    {
        showDatePicker = false;
        StateHasChanged();
    }

    private void ApplyDateRange()
    {
        UpdateDateRange();
        showDatePicker = false;
        StateHasChanged();
    }

    private void UpdateDateRange()
    {
        dateRangeText = $"{fromDate:dd/MM/yyyy} - {toDate:dd/MM/yyyy}";
        InvokeAsync(StateHasChanged);
    }

    private void InitializeEmployees()
    {
        employees = new List<Employee>
        {
            new Employee { Id = 1, Name = "James Carter", Team = "Team London", AvatarUrl = "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 2, Name = "Liam Anders", Team = "Team London", AvatarUrl = "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 3, Name = "Noah Bennett", Team = "Team London", AvatarUrl = "https://images.unsplash.com/photo-1531746020798-e6953c6e8e04?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 4, Name = "Ethan Clark", Team = "Team London", AvatarUrl = "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 5, Name = "Oliver Hayes", Team = "Team London", AvatarUrl = "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 6, Name = "Lucas Reid", Team = "Team London", AvatarUrl = "https://images.unsplash.com/photo-1531746020798-e6953c6e8e04?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 7, Name = "Mason Turner", Team = "Team Dublin", AvatarUrl = "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 8, Name = "Henry Collins", Team = "Team Dublin", AvatarUrl = "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 9, Name = "Aiden Brooks", Team = "Team Dublin", AvatarUrl = "https://images.unsplash.com/photo-1531746020798-e6953c6e8e04?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 10, Name = "Thomas omali", Team = "Team Dublin", AvatarUrl = "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" }
        };
    }

    private void InitializeTimeEntries()
    {
        var approver = employees.First(); // James Carter as the approver

        timeEntries = new List<TimeEntry>
        {
            // James Carter - Multiple entries (to demonstrate expansion)
            new TimeEntry
            {
                Id = 1,
                Employee = employees[0], // James Carter
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 15, 0),
                TotalHours = new TimeSpan(9, 15, 0),
                TimeBank = new TimeSpan(1, 15, 0),
                Status = TimeEntryStatus.Afventer
            },
            new TimeEntry
            {
                Id = 12,
                Employee = employees[0], // James Carter - 2nd entry
                Date = new DateTime(2022, 1, 23),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 15, 0),
                TotalHours = new TimeSpan(9, 15, 0),
                TimeBank = new TimeSpan(1, 15, 0),
                Status = TimeEntryStatus.Afventer
            },
            new TimeEntry
            {
                Id = 13,
                Employee = employees[0], // James Carter - 3rd entry
                Date = new DateTime(2022, 1, 24),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 15, 0),
                TotalHours = new TimeSpan(9, 15, 0),
                TimeBank = new TimeSpan(1, 15, 0),
                Status = TimeEntryStatus.Afventer
            },
            new TimeEntry
            {
                Id = 14,
                Employee = employees[0], // James Carter - 4th entry
                Date = new DateTime(2022, 1, 25),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 15, 0),
                TotalHours = new TimeSpan(9, 15, 0),
                TimeBank = new TimeSpan(1, 15, 0),
                Status = TimeEntryStatus.Afventer
            },
            
            // Liam Anders - Single entry with Afvist status
            new TimeEntry
            {
                Id = 2,
                Employee = employees[1], // Liam Anders
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 0, 0),
                TotalHours = new TimeSpan(9, 0, 0),
                TimeBank = new TimeSpan(3, 0, 0),
                Status = TimeEntryStatus.Afvist
            },
            
            // Noah Bennett - Single entry with Godkendt status and negative timebank
            new TimeEntry
            {
                Id = 3,
                Employee = employees[2], // Noah Bennett
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 0, 0),
                TotalHours = new TimeSpan(9, 0, 0),
                TimeBank = new TimeSpan(-1, -15, 0),
                Status = TimeEntryStatus.Godkendt,
                ApprovedBy = approver
            },
            
            // Ethan Clark - Single entry with Godkendt status
            new TimeEntry
            {
                Id = 4,
                Employee = employees[3], // Ethan Clark
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 0, 0),
                TotalHours = new TimeSpan(9, 0, 0),
                TimeBank = new TimeSpan(0, 0, 0),
                Status = TimeEntryStatus.Godkendt,
                ApprovedBy = approver
            },
            
            // Oliver Hayes - Single entry with Godkendt status
            new TimeEntry
            {
                Id = 5,
                Employee = employees[4], // Oliver Hayes
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 0, 0),
                TotalHours = new TimeSpan(9, 0, 0),
                TimeBank = new TimeSpan(0, 0, 0),
                Status = TimeEntryStatus.Godkendt,
                ApprovedBy = approver
            },
            
            // Lucas Reid - Single entry with Godkendt status and negative timebank
            new TimeEntry
            {
                Id = 6,
                Employee = employees[5], // Lucas Reid
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 0, 0),
                TotalHours = new TimeSpan(9, 0, 0),
                TimeBank = new TimeSpan(-1, -15, 0),
                Status = TimeEntryStatus.Godkendt,
                ApprovedBy = approver
            },
            
            // Mason Turner - Single entry with Godkendt status
            new TimeEntry
            {
                Id = 7,
                Employee = employees[6], // Mason Turner
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 0, 0),
                TotalHours = new TimeSpan(9, 0, 0),
                TimeBank = new TimeSpan(0, 0, 0),
                Status = TimeEntryStatus.Godkendt,
                ApprovedBy = approver
            },
            
            // Henry Collins - Single entry with Afvist status
            new TimeEntry
            {
                Id = 8,
                Employee = employees[7], // Henry Collins
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 0, 0),
                TotalHours = new TimeSpan(9, 0, 0),
                TimeBank = new TimeSpan(0, 0, 0),
                Status = TimeEntryStatus.Afvist
            },
            
            // Aiden Brooks - Single entry with Afvist status
            new TimeEntry
            {
                Id = 9,
                Employee = employees[8], // Aiden Brooks
                Date = new DateTime(2022, 1, 22),
                CheckIn = new TimeSpan(8, 0, 0),
                CheckOut = new TimeSpan(17, 0, 0),
                TotalHours = new TimeSpan(9, 0, 0),
                TimeBank = new TimeSpan(0, 0, 0),
                Status = TimeEntryStatus.Afvist
            }
        };
    }

    private List<TimeEntry> FilteredTimeEntries
    {
        get
        {
            var filtered = timeEntries.AsEnumerable();

            // Filter by date range
            filtered = filtered.Where(t => t.Date >= fromDate && t.Date <= toDate);

            // Filter by team/department
            if (!TeamService.IsAllTeamsSelected())
            {
                filtered = filtered.Where(t => t.Employee.Team == TeamService.SelectedTeam);
            }

            // Filter by status
            if (!string.IsNullOrEmpty(selectedStatus) && Enum.TryParse<TimeEntryStatus>(selectedStatus, out var status))
            {
                filtered = filtered.Where(t => t.Status == status);
            }

            // Filter by pending status if specified
            if (!string.IsNullOrEmpty(pendingFilter))
            {
                if (pendingFilter == "all")
                {
                    // Show all entries - no additional filtering
                }
                else
                {
                    // Default behavior - show only pending entries
                    filtered = filtered.Where(t => t.Status == TimeEntryStatus.Afventer);
                }
            }

            return filtered.ToList();
        }
    }

    private void HandleStatusChanged(TimeEntry timeEntry)
    {
        // Handle status change logic here
        StateHasChanged();
    }

    // New handler methods for PageHeader events
    private Task HandleFilterClick()
    {
        // TODO: Implement filter functionality
        return Task.CompletedTask;
    }

    private Task HandleCreateOptionSelected(CreateType createType)
    {
        switch (createType)
        {
            case CreateType.Case:
                isCreatePanelVisible = true;
                break;
            case CreateType.Employee:
                isEmployeeInvitePanelVisible = true;
                break;
            case CreateType.Geofence:
                Navigation.NavigateTo("/geofence-create");
                break;
            case CreateType.AddHours:
                isAddHoursPanelVisible = true;
                break;
        }
        return Task.CompletedTask;
    }

    private void CloseCreatePanel()
    {
        isCreatePanelVisible = false;
    }

    private void CloseEmployeeInvitePanel()
    {
        isEmployeeInvitePanelVisible = false;
    }

    private void CloseAddHoursPanel()
    {
        isAddHoursPanelVisible = false;
    }

    private void HandleCaseCreated(Case newCase)
    {
        // Handle the newly created case - in this context it could be a time entry creation
        // For now just close the panel
        StateHasChanged();
    }

    private void HandleEmployeeInvited(Employee newEmployee)
    {
        // Add the new employee to the employees list
        employees.Add(newEmployee);
        
        // In a real application, you might want to:
        // 1. Save to database
        // 2. Send notification
        // 3. Refresh employee list from server
        
        StateHasChanged();
    }

    private void HandleHoursSubmitted(List<AddHoursPanel.TimeEntryData> hoursData)
    {
        // Convert AddHoursPanel.TimeEntryData to TimeEntry objects and add to timeEntries
        // For demo purposes, we'll use the current user (first employee) as the submitter
        var currentEmployee = employees.FirstOrDefault() ?? new Employee { Id = 999, Name = "Current User", Team = "Unknown" };
        
        foreach (var entry in hoursData)
        {
            var newTimeEntry = new TimeEntry
            {
                Id = Random.Shared.Next(10000, 99999),
                Employee = currentEmployee,
                Date = entry.Date,
                CheckIn = new TimeSpan(8, 0, 0), // Default check-in time
                CheckOut = new TimeSpan(8, 0, 0).Add(TimeSpan.FromHours((double)entry.TotalHours)), // Calculate check-out
                TotalHours = TimeSpan.FromHours((double)entry.TotalHours),
                TimeBank = TimeSpan.Zero, // Will be calculated later
                Status = TimeEntryStatus.Afventer, // New entries are pending
                Description = entry.Description
            };
            
            timeEntries.Add(newTimeEntry);
        }
        
        Console.WriteLine($"Added {hoursData.Count} time entries for user: {currentEmployee.Name}");
        StateHasChanged();
    }

    private void ChangeBulkStatus(string? newStatus)
    {
        bulkStatus = newStatus;
        timeEntryTable?.ApplyBulkStatus(newStatus);
        StateHasChanged();
    }

    private void InitializeCustomers()
    {
        customers = new List<Customer>
        {
            new Customer { Id = 1, Name = "VVS Hansen ApS", ContactPerson = "Lars Hansen", Email = "lars@vvshansen.dk", Phone = "+45 12 34 56 78" },
            new Customer { Id = 2, Name = "Elektro Nielsen A/S", ContactPerson = "Peter Nielsen", Email = "peter@elektronielsen.dk", Phone = "+45 87 65 43 21" },
            new Customer { Id = 3, Name = "Byg & Co", ContactPerson = "Mette Andersen", Email = "mette@bygco.dk", Phone = "+45 23 45 67 89" }
        };
    }

    private string GetTopFilterStatusClass()
    {
        return selectedStatus switch
        {
            "Afventer" => "pending",
            "Godkendt" => "approved",
            "Afvist" => "rejected",
            _ => ""
        };
    }

    private string GetBulkStatusClass()
    {
        return bulkStatus switch
        {
            "Afventer" => "pending",
            "Godkendt" => "approved",
            "Afvist" => "rejected",
            _ => ""
        };
    }

    private void LogCurrentStatus()
    {
        Console.WriteLine($"[Timeoversigt DEBUG] Button clicked!");
        Console.WriteLine($"[Timeoversigt DEBUG] Current User: {UserRoleService.CurrentUserEmail}");
        Console.WriteLine($"[Timeoversigt DEBUG] Is Administrator: {UserRoleService.IsAdministrator}");
        Console.WriteLine($"[Timeoversigt DEBUG] PageHeader should show: {(UserRoleService.IsAdministrator ? "Admin options" : "Employee options")}");
    }


} 