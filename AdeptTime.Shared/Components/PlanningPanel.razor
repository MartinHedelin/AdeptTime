@using AdeptTime.Shared.Models

<div class="planning-panel @(IsVisible ? "visible" : "")">
    <div class="panel-content">
        <!-- Header -->
        <div class="panel-header">
            <button class="close-button" @onclick="HandleClose">
                <i class="fas fa-times"></i>
            </button>
            <h2>Planlæg</h2>
        </div>

        <!-- Search -->
        <div class="panel-search">
            <div class="search-container">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="search-input" placeholder="Søg..." @bind="searchQuery" @bind:event="oninput" />
            </div>
        </div>

        <!-- Filters -->
        <div class="panel-filters">
            <div class="filter-row">
                <div class="filter-group">
                    <select class="filter-select" @bind="selectedStatus">
                        <option value="">Status</option>
                        <option value="Ikke allokeret">Ikke allokeret</option>
                        <option value="Scheduled">Planlagt</option>
                        <option value="InProgress">I gang</option>
                        <option value="Completed">Færdig</option>
                    </select>
                </div>
                <div class="filter-group">
                    <select class="filter-select" @bind="selectedEmployee">
                        <option value="">Medarbejder</option>
                        @foreach (var employee in Employees)
                        {
                            <option value="@employee.Id">@employee.Name</option>
                        }
                    </select>
                </div>
                <div class="filter-group">
                    <select class="filter-select" @bind="selectedCustomer">
                        <option value="">Kunde</option>
                        @foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Schedule List -->
        <div class="schedule-list">
            @foreach (var entry in FilteredEntries)
            {
                <div class="schedule-item @GetStatusClass(entry.Status, entry.Employee)">
                    <div class="schedule-item-header">
                        <div class="company-name">@entry.Customer.Name</div>
                        <div class="schedule-time">
                            @if (entry.StartTime == entry.EndTime)
                            {
                                <span>@entry.StartTime.ToString(@"hh\:mm")</span>
                            }
                            else
                            {
                                <span>@entry.StartTime.ToString(@"hh\:mm") - @entry.EndTime.ToString(@"hh\:mm")</span>
                            }
                        </div>
                    </div>
                    <div class="schedule-location">
                        @entry.Location
                    </div>
                    <div class="schedule-employee">
                        @if (entry.Employee != null)
                        {
                            <span>@entry.Employee.Name</span>
                        }
                        else
                        {
                            <span class="unassigned">Ikke tildelt</span>
                        }
                    </div>
                </div>
            }
            
            @if (!FilteredEntries.Any())
            {
                <div class="no-entries">
                    <i class="fas fa-calendar-alt"></i>
                    <p>Ingen planlagte opgaver fundet</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .planning-panel {
        position: fixed;
        top: 0;
        right: -420px;
        width: 420px;
        height: 100vh;
        background: white;
        box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        transition: right 0.3s ease;
        display: flex;
        flex-direction: column;
    }

    .planning-panel.visible {
        right: 0;
    }

    .panel-content {
        display: flex;
        flex-direction: column;
        height: 100%;
        overflow: hidden;
    }

    .panel-header {
        display: flex;
        align-items: center;
        padding: 20px 24px;
        border-bottom: 1px solid #e9ecef;
        background: white;
        flex-shrink: 0;
        gap: 16px;
    }

    .panel-header h2 {
        margin: 0;
        font-size: 20px;
        font-weight: 600;
        color: #2c3e50;
        flex: 1;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #6c757d;
        padding: 8px;
        border-radius: 4px;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        order: -1;
    }

    .close-button:hover {
        background: #f8f9fa;
        color: #495057;
    }

    .panel-search {
        padding: 16px 24px;
        border-bottom: 1px solid #e9ecef;
        background: white;
        flex-shrink: 0;
    }

    .search-container {
        position: relative;
        width: 100%;
    }

    .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-size: 14px;
    }

    .search-input {
        width: 100%;
        padding: 10px 12px 10px 36px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        background: white;
        transition: border-color 0.2s ease;
    }

    .search-input:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .panel-filters {
        padding: 16px 24px;
        border-bottom: 1px solid #e9ecef;
        background: #f8f9fa;
        flex-shrink: 0;
    }

    .filter-row {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 12px;
    }

    .filter-group {
        display: flex;
        align-items: center;
    }

    .filter-select {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 14px;
        background: white;
        cursor: pointer;
        color: #495057;
        transition: border-color 0.2s ease;
    }

    .filter-select:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .schedule-list {
        flex: 1;
        overflow-y: auto;
        padding: 16px 24px;
    }

    .schedule-item {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 12px;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .schedule-item:hover {
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transform: translateY(-1px);
    }

    .schedule-item.scheduled {
        border-left: 4px solid #007bff;
    }

    .schedule-item.in-progress {
        border-left: 4px solid #28a745;
        background: #f8fff9;
    }

    .schedule-item.completed {
        border-left: 4px solid #6c757d;
        background: #f8f9fa;
    }

    .schedule-item.unassigned {
        border-left: 4px solid #ffc107;
        background: #fffdf2;
    }

    .schedule-item-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .company-name {
        font-weight: 600;
        font-size: 16px;
        color: #2c3e50;
    }

    .schedule-time {
        font-size: 14px;
        color: #6c757d;
        font-weight: 500;
    }

    .schedule-location {
        color: #6c757d;
        font-size: 14px;
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .schedule-employee {
        font-size: 13px;
        color: #495057;
    }

    .schedule-employee .unassigned {
        color: #856404;
        font-style: italic;
    }

    .no-entries {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .no-entries i {
        font-size: 48px;
        margin-bottom: 16px;
        opacity: 0.5;
    }

    .no-entries p {
        margin: 0;
        font-size: 16px;
    }

    /* Scrollbar styling */
    .schedule-list::-webkit-scrollbar {
        width: 6px;
    }

    .schedule-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .schedule-list::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }

    .schedule-list::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .filter-row {
            grid-template-columns: 1fr;
            gap: 8px;
        }
    }

    @@media (max-width: 480px) {
        .planning-panel {
            width: 100vw;
            right: -100vw;
        }

        .panel-header {
            padding: 16px 20px;
        }

        .panel-search {
            padding: 12px 20px;
        }

        .panel-filters {
            padding: 12px 20px;
        }

        .filter-row {
            grid-template-columns: 1fr;
            gap: 8px;
        }
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public List<ScheduleEntry> ScheduleEntries { get; set; } = new();
    [Parameter] public List<Customer> Customers { get; set; } = new();
    [Parameter] public List<Employee> Employees { get; set; } = new();

    private string selectedStatus = "";
    private string selectedEmployee = "";
    private string selectedCustomer = "";
    private string searchQuery = "";

    private List<ScheduleEntry> FilteredEntries
    {
        get
        {
            var filtered = ScheduleEntries.AsEnumerable();

            if (!string.IsNullOrEmpty(selectedStatus))
            {
                if (selectedStatus == "Ikke allokeret")
                {
                    filtered = filtered.Where(s => s.Employee == null);
                }
                else if (Enum.TryParse<ScheduleStatus>(selectedStatus, out var status))
                {
                    filtered = filtered.Where(s => s.Status == status);
                }
            }

            if (!string.IsNullOrEmpty(selectedEmployee) && int.TryParse(selectedEmployee, out var employeeId))
            {
                filtered = filtered.Where(s => s.Employee?.Id == employeeId);
            }

            if (!string.IsNullOrEmpty(selectedCustomer) && int.TryParse(selectedCustomer, out var customerId))
            {
                filtered = filtered.Where(s => s.Customer.Id == customerId);
            }

            if (!string.IsNullOrEmpty(searchQuery))
            {
                filtered = filtered.Where(s =>
                    s.Customer.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    s.Location.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    (s.Employee != null && s.Employee.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)));
            }

            return filtered.OrderBy(s => s.Date).ThenBy(s => s.StartTime).ToList();
        }
    }

    private string GetStatusClass(ScheduleStatus status, Employee? employee = null)
    {
        if (employee == null)
        {
            return "unassigned";
        }

        return status switch
        {
            ScheduleStatus.Scheduled => "scheduled",
            ScheduleStatus.InProgress => "in-progress",
            ScheduleStatus.Completed => "completed",
            _ => "scheduled"
        };
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }
}
