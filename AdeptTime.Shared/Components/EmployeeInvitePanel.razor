@using AdeptTime.Shared.Models
@using AdeptTime.Shared.Interfaces
@using AdeptTime.Shared.Services
@inject IUserService UserService
@inject ITeamService TeamService
@inject UserRoleService UserRoleService

<div class="employee-invite-overlay @(IsVisible ? "visible" : "")">
    <div class="employee-invite-panel @(IsVisible ? "open" : "")">
        <!-- Header -->
        <div class="panel-header">
            <h2>Tilføj medarbejder</h2>
            <button class="close-button" @onclick="HandleClose">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="panel-content">
            <!-- Employee Creation Form -->
            <div class="form-section">
                <div class="form-group">
                    <div class="checkbox-group">
                        <input id="is-administrator" 
                               type="checkbox" 
                               @bind="isAdministrator" 
                               class="form-checkbox" />
                        <label for="is-administrator" class="checkbox-label">Administrator</label>
                    </div>
                </div>

                <div class="form-group">
                    <label for="employee-email">Email adresse <span class="required">*</span></label>
                    <input id="employee-email" 
                           type="email" 
                           @bind="employeeEmail" 
                           class="form-input @(emailError ? "error" : "")" 
                           placeholder="Indtast medarbejders email..." />
                    @if (emailError)
                    {
                        <div class="error-message">Venligst indtast en gyldig email adresse</div>
                    }
                </div>

                <div class="form-group">
                    <label for="employee-name">Navn <span class="required">*</span></label>
                    <input id="employee-name" 
                           type="text" 
                           @bind="employeeName" 
                           class="form-input @(nameError ? "error" : "")" 
                           placeholder="Medarbejders fulde navn..." />
                    @if (nameError)
                    {
                        <div class="error-message">Navn er påkrævet</div>
                    }
                </div>

                @if (!isAdministrator)
                {
                    <div class="form-group">
                        <label for="employee-team">Team <span class="required">*</span></label>
                        <select id="employee-team" @bind="selectedTeamId" class="form-select @(teamError ? "error" : "")">
                            <option value="">Vælg team</option>
                            @foreach (var team in availableTeams.Where(t => t.Name != "All Teams"))
                            {
                                <option value="@team.Id">@team.Name</option>
                            }
                        </select>
                        @if (teamError)
                        {
                            <div class="error-message">Team er påkrævet for medarbejdere</div>
                        }
                    </div>

                    <div class="form-group">
                        <label for="employee-position">Position <span class="required">*</span></label>
                        <select id="employee-position" @bind="selectedPosition" class="form-select @(positionError ? "error" : "")">
                            <option value="">Vælg position</option>
                            <option value="Tekniker">Tekniker</option>
                            <option value="Senior Tekniker">Senior Tekniker</option>
                            <option value="Projektleder">Projektleder</option>
                            <option value="Team Lead">Team Lead</option>
                            <option value="Specialist">Specialist</option>
                        </select>
                        @if (positionError)
                        {
                            <div class="error-message">Position er påkrævet</div>
                        }
                    </div>
                }

                <div class="form-group">
                    <label for="employee-phone">Telefonnummer <span class="optional">(optional)</span></label>
                    <input id="employee-phone" 
                           type="tel" 
                           @bind="employeePhone" 
                           class="form-input" 
                           placeholder="+45 12 34 56 78..." />
                </div>

                <div class="form-group">
                    <label for="employee-address">Adresse <span class="optional">(optional)</span></label>
                    <input id="employee-address" 
                           type="text" 
                           @bind="employeeAddress" 
                           class="form-input" 
                           placeholder="Gade 123, 1234 By..." />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-error">
                        @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">
                        @successMessage
                    </div>
                }
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="panel-footer">
            <button class="cancel-button" @onclick="HandleClose">
                Annuller
            </button>
            <button class="create-button" @onclick="CreateEmployee" disabled="@(!IsFormValid || isLoading)">
                @if (isLoading)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Opretter medarbejder...</span>
                }
                else
                {
                    <i class="fas fa-user-plus"></i>
                    <span>Opret medarbejder</span>
                }
            </button>
        </div>
    </div>
</div>

<style>
    .employee-invite-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }

    .employee-invite-overlay.visible {
        opacity: 1;
        visibility: visible;
    }

    .employee-invite-panel {
        position: fixed;
        top: 0;
        right: -500px;
        width: 500px;
        height: 100%;
        background: white;
        box-shadow: -2px 0 20px rgba(0, 0, 0, 0.1);
        transition: right 0.3s ease;
        display: flex;
        flex-direction: column;
        z-index: 1001;
    }

    .employee-invite-panel.open {
        right: 0;
    }

    .panel-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 24px 32px;
        border-bottom: 1px solid #e9ecef;
        background: #f8f9fa;
    }

    .panel-header h2 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
        color: #212529;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 20px;
        color: #6c757d;
        cursor: pointer;
        padding: 8px;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .close-button:hover {
        background: #e9ecef;
        color: #495057;
    }

    .panel-content {
        flex: 1;
        overflow-y: auto;
        padding: 32px;
    }

    .form-section {
        margin-bottom: 32px;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        font-size: 14px;
        color: #374151;
    }

    .required {
        color: #dc3545;
        font-weight: 400;
    }

    .optional {
        color: #6c757d;
        font-weight: 400;
    }

    .form-input, .form-select {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 14px;
        color: #374151;
        background: white;
        transition: all 0.2s ease;
    }

    .form-input:focus, .form-select:focus {
        outline: none;
        border-color: #938fbf;
        box-shadow: 0 0 0 3px rgba(147, 143, 191, 0.1);
    }

    .form-input.error, .form-select.error {
        border-color: #dc3545;
    }

    .form-input::placeholder {
        color: #9ca3af;
    }

    .error-message {
        margin-top: 8px;
        font-size: 12px;
        color: #dc3545;
    }

    .checkbox-group {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .form-checkbox {
        width: 18px;
        height: 18px;
        border: 2px solid #e1e5e9;
        border-radius: 4px;
        cursor: pointer;
        accent-color: #938fbf;
    }

    .checkbox-label {
        font-size: 14px;
        font-weight: 500;
        color: #374151;
        cursor: pointer;
        margin: 0;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        font-size: 0.9rem;
    }

    .alert-error {
        background-color: #fee2e2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .alert-success {
        background-color: #d1fae5;
        color: #059669;
        border: 1px solid #a7f3d0;
    }

    .panel-footer {
        padding: 24px 32px;
        border-top: 1px solid #e9ecef;
        background: #f8f9fa;
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    .cancel-button {
        padding: 12px 24px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        background: white;
        color: #6c757d;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .cancel-button:hover {
        border-color: #c3c8ce;
        color: #495057;
    }

    .create-button {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        background: #938fbf;
        color: white;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .create-button:hover:not(:disabled) {
        background: #7a75a8;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(147, 143, 191, 0.3);
    }

    .create-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .create-button i {
        font-size: 12px;
    }

    @@media (max-width: 768px) {
        .employee-invite-panel {
            width: 100%;
            right: -100%;
        }

        .panel-header, .panel-content, .panel-footer {
            padding-left: 20px;
            padding-right: 20px;
        }
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Employee> OnEmployeeInvited { get; set; }

    private string employeeEmail = "";
    private string employeeName = "";
    private string selectedTeamId = "";
    private string selectedPosition = "";
    private string employeePhone = "";
    private string employeeAddress = "";
    private bool isAdministrator = false;
    private bool emailError = false;
    private bool nameError = false;
    private bool teamError = false;
    private bool positionError = false;
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;

    private List<Team> availableTeams = new();

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !availableTeams.Any())
        {
            // Load teams when panel opens
            await LoadTeamsAsync();
        }
    }

    private async Task LoadTeamsAsync()
    {
        try
        {
            availableTeams = await TeamService.GetAllTeamsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load teams: {ex.Message}");
            availableTeams = new List<Team>();
        }
    }

    private bool IsFormValid
    {
        get
        {
            var hasEmail = !string.IsNullOrWhiteSpace(employeeEmail) && IsValidEmail(employeeEmail);
            var hasName = !string.IsNullOrWhiteSpace(employeeName);
            var hasTeamIfNeeded = isAdministrator || !string.IsNullOrWhiteSpace(selectedTeamId);
            var hasPositionIfNeeded = isAdministrator || !string.IsNullOrWhiteSpace(selectedPosition);
            
            return hasEmail && hasName && hasTeamIfNeeded && hasPositionIfNeeded;
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private async Task HandleClose()
    {
        ResetForm();
        await OnClose.InvokeAsync();
    }

    private async Task CreateEmployee()
    {
        // Reset errors
        emailError = nameError = teamError = positionError = false;
        errorMessage = successMessage = null;

        // Validate form
        if (!IsValidEmail(employeeEmail))
        {
            emailError = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(employeeName))
        {
            nameError = true;
            return;
        }

        if (!isAdministrator && string.IsNullOrWhiteSpace(selectedTeamId))
        {
            teamError = true;
            return;
        }

        if (!isAdministrator && string.IsNullOrWhiteSpace(selectedPosition))
        {
            positionError = true;
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            // Check if user already exists
            var existingUser = await UserService.GetUserByEmailAsync(employeeEmail);
            if (existingUser != null)
            {
                errorMessage = "En medarbejder med denne email eksisterer allerede";
                return;
            }

            // Create new user in Users table
            var newUser = new User
            {
                Email = employeeEmail,
                PasswordHash = "Test12345678", // Will be hashed in UserService
                UserTypeId = isAdministrator ? 1 : 0,
                Name = employeeName,
                PhoneNumber = employeePhone,
                Address = employeeAddress,
                UserState = "active" // Set to active by default for testing
            };

            var createdUser = await UserService.CreateUserAsync(newUser);

            // Create Employee object for UI compatibility
            var selectedTeam = availableTeams.FirstOrDefault(t => t.Id.ToString() == selectedTeamId);
            var newEmployee = new Employee
            {
                Id = (int)createdUser.Id.GetHashCode(),
                Name = createdUser.Name,
                Team = selectedTeam?.Name ?? (isAdministrator ? "Management" : "Unknown"),
                Position = selectedPosition,
                AvatarUrl = createdUser.AvatarUrl ?? "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D",
                UserType = isAdministrator ? "Administrator" : "Worker"
            };

            Console.WriteLine($"✅ Employee created: {newUser.Name} ({newUser.Email}) - Type: {(isAdministrator ? "Administrator" : "Worker")} - State: invited");

            successMessage = $"Medarbejder {employeeName} er blevet oprettet og inviteret!";
            
            // Wait a moment to show success message
            await Task.Delay(1500);

            await OnEmployeeInvited.InvokeAsync(newEmployee);
            await HandleClose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating employee: {ex.Message}");
            errorMessage = "Der opstod en fejl ved oprettelse af medarbejderen. Prøv igen.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        employeeEmail = "";
        employeeName = "";
        selectedTeamId = "";
        selectedPosition = "";
        employeePhone = "";
        employeeAddress = "";
        isAdministrator = false;
        emailError = nameError = teamError = positionError = false;
        errorMessage = successMessage = null;
        isLoading = false;
    }
}