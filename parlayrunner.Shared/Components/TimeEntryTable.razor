@using parlayrunner.Shared.Models

<div class="time-entry-table-container @(isDetailPanelVisible ? "hidden" : "")">
    <div class="table-wrapper">
        <table class="time-entry-table">
            <thead>
                <tr>
                    <th class="checkbox-col">
                        <input type="checkbox" class="table-checkbox" />
                    </th>
                    <th class="employee-col">Medarbejder</th>
                    <th class="date-col">Dato</th>
                    <th class="time-col">Check ind</th>
                    <th class="time-col">Check ud</th>
                    <th class="time-col">Timer total</th>
                    <th class="time-col">Timebank</th>
                    <th class="status-col">Godkend/Afvis</th>
                    <th class="admin-col">Admin</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in GroupedTimeEntries)
                {
                    @* Main row for the employee *@
                    <tr class="table-row main-row @(group.Value.Count > 1 ? "expandable" : "")" @onclick="() => HandleRowClick(group.Key)" @ondblclick="() => ShowEmployeeDetail(group.Key)">
                        <td class="checkbox-col">
                            <input type="checkbox" class="table-checkbox" @onclick:stopPropagation="true" />
                        </td>
                        <td class="employee-col">
                            <div class="employee-info">
                                @if (group.Value.Count > 1)
                                {
                                    <button class="expand-button" @onclick:stopPropagation="true" @onclick="() => ToggleExpansion(group.Key)">
                                        @if (expandedEmployees.Contains(group.Key))
                                        {
                                            <i class="fas fa-chevron-down"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-chevron-right"></i>
                                        }
                                    </button>
                                }
                                <img src="@group.Value.First().Employee.AvatarUrl" alt="@group.Value.First().Employee.Name" class="employee-avatar" />
                                <div class="employee-details">
                                    <div class="employee-name">@group.Value.First().Employee.Name</div>
                                    <div class="employee-team">@group.Value.First().Employee.Team</div>
                                </div>
                            </div>
                        </td>
                        <td class="date-col">@group.Value.First().Date.ToString("dd MMMM yyyy")</td>
                        <td class="time-col">@group.Value.First().CheckIn.ToString(@"hh\:mm")</td>
                        <td class="time-col">@group.Value.First().CheckOut.ToString(@"hh\:mm")</td>
                        <td class="time-col">@FormatTotalHours(group.Value.First().TotalHours)</td>
                        <td class="time-col">
                            <span class="timebank @GetTimeBankClass(group.Value.First().TimeBank)">
                                @FormatTimeBank(group.Value.First().TimeBank)
                            </span>
                        </td>
                        <td class="status-col">
                            <span class="status-badge @GetStatusClass(group.Value.First().Status)">
                                @GetStatusText(group.Value.First().Status)
                            </span>
                        </td>
                        <td class="admin-col">
                            @if (group.Value.First().ApprovedBy != null)
                            {
                                var approver = group.Value.First().ApprovedBy;
                                <div class="approved-by">
                                    <img src="@approver.AvatarUrl" alt="@approver.Name" class="approver-avatar" />
                                    <div class="approver-details">
                                        <div class="approver-name">@approver.Name</div>
                                        <div class="approver-team">@approver.Team</div>
                                    </div>
                                </div>
                            }
                        </td>
                    </tr>

                    @* Expanded rows for additional entries *@
                    @if (expandedEmployees.Contains(group.Key) && group.Value.Count > 1)
                    {
                        @for (int i = 1; i < group.Value.Count; i++)
                        {
                            var entry = group.Value[i];
                            <tr class="table-row expanded-row">
                                <td class="checkbox-col">
                                    <input type="checkbox" class="table-checkbox" />
                                </td>
                                <td class="employee-col">
                                    <div class="employee-info expanded">
                                        <div class="expand-spacer"></div>
                                        <div class="employee-details-minimal">
                                            <!-- Empty or minimal content for expanded rows -->
                                        </div>
                                    </div>
                                </td>
                                <td class="date-col">@entry.Date.ToString("dd MMMM yyyy")</td>
                                <td class="time-col">@entry.CheckIn.ToString(@"hh\:mm")</td>
                                <td class="time-col">@entry.CheckOut.ToString(@"hh\:mm")</td>
                                <td class="time-col">@FormatTotalHours(entry.TotalHours)</td>
                                <td class="time-col">
                                    <span class="timebank @GetTimeBankClass(entry.TimeBank)">
                                        @FormatTimeBank(entry.TimeBank)
                                    </span>
                                </td>
                                <td class="status-col">
                                    <span class="status-badge @GetStatusClass(entry.Status)">
                                        @GetStatusText(entry.Status)
                                    </span>
                                </td>
                                <td class="admin-col">
                                    @if (entry.ApprovedBy != null)
                                    {
                                        var approver = entry.ApprovedBy;
                                        <div class="approved-by">
                                            <img src="@approver.AvatarUrl" alt="@approver.Name" class="approver-avatar" />
                                            <div class="approver-details">
                                                <div class="approver-name">@approver.Name</div>
                                                <div class="approver-team">@approver.Team</div>
                                            </div>
                                        </div>
                                    }
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Employee Detail Panel -->
<EmployeeDetailPanel 
    IsVisible="isDetailPanelVisible"
    Employee="selectedEmployee"
    TimeEntries="selectedEmployeeEntries"
    OnClose="CloseDetailPanel"
    OnStatusChanged="OnStatusChanged" />

<style>
    .time-entry-table-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .time-entry-table-container.hidden {
        display: none;
    }

    .table-wrapper {
        overflow-x: auto;
    }

    .time-entry-table {
        width: 100%;
        border-collapse: collapse;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    }

    .time-entry-table thead {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
    }

    .time-entry-table th {
        padding: 16px 12px;
        text-align: left;
        font-weight: 600;
        font-size: 14px;
        color: #495057;
        border-right: 1px solid #e9ecef;
    }

    .time-entry-table th:last-child {
        border-right: none;
    }

    .table-row {
        border-bottom: 1px solid #e9ecef;
        transition: background-color 0.2s ease;
        cursor: pointer;
    }

    .table-row:hover {
        background-color: #f8f9fa;
    }

    .table-row.main-row:hover {
        background-color: #e3f2fd;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .time-entry-table td {
        padding: 16px 12px;
        vertical-align: middle;
        border-right: 1px solid #e9ecef;
        font-size: 14px;
    }

    .time-entry-table td:last-child {
        border-right: none;
    }

    .checkbox-col {
        width: 50px;
        text-align: center;
    }

    .table-checkbox {
        width: 16px;
        height: 16px;
        cursor: pointer;
    }

    .employee-col {
        min-width: 200px;
    }

    .employee-info {
        display: flex;
        align-items: center;
        gap: 8px;
        min-height: 48px; /* Ensure consistent height */
    }

    .employee-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        flex-shrink: 0;
    }

    .employee-details {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    .employee-name {
        font-weight: 600;
        color: #212529;
        font-size: 14px;
    }

    .employee-team {
        font-size: 12px;
        color: #6c757d;
        margin-top: 2px;
    }

    .date-col {
        min-width: 120px;
        color: #495057;
    }

    .time-col {
        min-width: 80px;
        color: #495057;
        text-align: center;
    }

    .timebank {
        font-weight: 600;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 13px;
    }

    .timebank.positive {
        color: #28a745;
        background-color: #d4edda;
    }

    .timebank.negative {
        color: #dc3545;
        background-color: #f8d7da;
    }

    .timebank.zero {
        color: #6c757d;
        background-color: #e9ecef;
    }

    .status-col {
        min-width: 120px;
    }

    .status-badge {
        padding: 4px 12px;
        border-radius: 16px;
        font-size: 13px;
        font-weight: 500;
        display: inline-block;
        text-align: center;
        min-width: 80px;
    }

    .status-badge.pending {
        color: #007bff;
        background-color: #e3f2fd;
    }

    .status-badge.approved {
        color: #28a745;
        background-color: #d4edda;
    }

    .status-badge.rejected {
        color: #dc3545;
        background-color: #f8d7da;
    }

    .admin-col {
        min-width: 150px;
    }

    .expand-button {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        padding: 0;
        margin-right: 8px;
        cursor: pointer;
        color: #495057;
        font-size: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
        border-radius: 4px;
        transition: all 0.2s ease;
        flex-shrink: 0; /* Prevent button from shrinking */
    }

    .expand-button:hover {
        background-color: #f8f9fa;
        color: #495057;
    }

    .expandable {
        cursor: pointer;
    }

    .expandable:hover {
        background-color: #f8f9fa;
    }

    .expanded-row {
        background-color: #fafbfc;
        border-left: 3px solid #e9ecef;
    }

    .expanded-row .employee-info {
        padding-left: 28px;
    }

    .expand-spacer {
        width: 20px;
        margin-right: 8px;
    }

    .main-row.expandable {
        border-bottom: none;
    }

    .main-row.expandable + .expanded-row:last-of-type {
        border-bottom: 1px solid #e9ecef;
    }

    .approved-by {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .approver-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .approver-details {
        display: flex;
        flex-direction: column;
    }

    .approver-name {
        font-weight: 500;
        color: #212529;
        font-size: 13px;
    }

    .approver-team {
        font-size: 11px;
        color: #6c757d;
        margin-top: 1px;
    }

    @@media (max-width: 768px) {
        .time-entry-table th,
        .time-entry-table td {
            padding: 12px 8px;
            font-size: 13px;
        }

        .employee-col {
            min-width: 160px;
        }

        .employee-avatar {
            width: 32px;
            height: 32px;
        }
    }
</style>

@code {
    [Parameter] public List<TimeEntry> TimeEntries { get; set; } = new();
    [Parameter] public EventCallback<TimeEntry> OnStatusChanged { get; set; }

    private HashSet<int> expandedEmployees = new();
    private bool isDetailPanelVisible = false;
    private Employee? selectedEmployee = null;
    private List<TimeEntry>? selectedEmployeeEntries = null;

    private Dictionary<int, List<TimeEntry>> GroupedTimeEntries
    {
        get
        {
            return TimeEntries
                .GroupBy(e => e.Employee.Id)
                .ToDictionary(g => g.Key, g => g.OrderBy(e => e.Date).ToList());
        }
    }

    private void ToggleExpansion(int employeeId)
    {
        if (expandedEmployees.Contains(employeeId))
        {
            expandedEmployees.Remove(employeeId);
        }
        else
        {
            expandedEmployees.Add(employeeId);
        }
        StateHasChanged();
    }

    private void HandleRowClick(int employeeId)
    {
        // For rows with multiple entries, toggle expansion
        var entries = GroupedTimeEntries[employeeId];
        if (entries.Count > 1)
        {
            ToggleExpansion(employeeId);
        }
        // For single entries, show detail panel directly
        else
        {
            ShowEmployeeDetail(employeeId);
        }
    }

    private void ShowEmployeeDetail(int employeeId)
    {
        var entries = GroupedTimeEntries[employeeId];
        selectedEmployee = entries.First().Employee;
        selectedEmployeeEntries = entries;
        isDetailPanelVisible = true;
        StateHasChanged();
    }

    private void CloseDetailPanel()
    {
        isDetailPanelVisible = false;
        selectedEmployee = null;
        selectedEmployeeEntries = null;
        StateHasChanged();
    }

    private string FormatTotalHours(TimeSpan totalHours)
    {
        return $"{(int)totalHours.TotalHours}h {totalHours.Minutes}m";
    }

    private string FormatTimeBank(TimeSpan timeBank)
    {
        if (timeBank == TimeSpan.Zero)
            return "0h 0m";
        
        var sign = timeBank.TotalMinutes < 0 ? "-" : "";
        var hours = Math.Abs((int)timeBank.TotalHours);
        var minutes = Math.Abs(timeBank.Minutes);
        
        return $"{sign}{hours}h {minutes}m";
    }

    private string GetTimeBankClass(TimeSpan timeBank)
    {
        if (timeBank.TotalMinutes > 0) return "positive";
        if (timeBank.TotalMinutes < 0) return "negative";
        return "zero";
    }

    private string GetStatusClass(TimeEntryStatus status)
    {
        return status switch
        {
            TimeEntryStatus.Afventer => "pending",
            TimeEntryStatus.Godkendt => "approved",
            TimeEntryStatus.Afvist => "rejected",
            _ => "pending"
        };
    }

    private string GetStatusText(TimeEntryStatus status)
    {
        return status switch
        {
            TimeEntryStatus.Afventer => "Afventer",
            TimeEntryStatus.Godkendt => "Godkendt",
            TimeEntryStatus.Afvist => "Afvist",
            _ => "Afventer"
        };
    }

    private async Task UpdateStatus(int entryId, string? newStatus)
    {
        if (string.IsNullOrEmpty(newStatus)) return;

        var entry = TimeEntries.FirstOrDefault(e => e.Id == entryId);
        if (entry != null && Enum.TryParse<TimeEntryStatus>(newStatus, out var status))
        {
            entry.Status = status;
            await OnStatusChanged.InvokeAsync(entry);
        }
    }
} 