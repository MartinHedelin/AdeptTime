@using parlayrunner.Shared.Models

<div class="statistic-card @GetCardClass()" @onclick="HandleCardClick">
    <div class="statistic-icon">
        <i class="@Statistic.IconClass" style="color: @Statistic.IconColor;"></i>
    </div>
    <div class="statistic-title">@Statistic.Title</div>
    <div class="statistic-value">@Statistic.Value</div>
    @if (!string.IsNullOrEmpty(Statistic.Description))
    {
        <div class="statistic-description">@Statistic.Description</div>
    }
</div>

<style>
    .statistic-card {
        background: white;
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
        transition: all 0.2s ease;
        cursor: pointer;
        border: 1px solid #f3f4f6;
        min-height: 140px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        position: relative;
    }

    .statistic-card:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

    .statistic-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 56px;
        height: 56px;
        border-radius: 50%;
        margin-bottom: 16px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }

    .statistic-card.attendance .statistic-icon {
        background: linear-gradient(135deg, #F3E8FF 0%, #E9D5FF 100%);
    }

    .statistic-card.active .statistic-icon {
        background: linear-gradient(135deg, #DBEAFE 0%, #BFDBFE 100%);
    }

    .statistic-card.users .statistic-icon {
        background: linear-gradient(135deg, #D1FAE5 0%, #A7F3D0 100%);
    }

    .statistic-card.time .statistic-icon {
        background: linear-gradient(135deg, #DBEAFE 0%, #BFDBFE 100%);
    }

    .statistic-icon i {
        font-size: 24px;
    }

    .statistic-title {
        font-size: 14px;
        color: #6B7280;
        margin-bottom: 8px;
        line-height: 1.3;
        font-weight: 500;
    }

    .statistic-value {
        font-size: 32px;
        font-weight: 700;
        color: #111827;
        line-height: 1.1;
    }

    .statistic-description {
        font-size: 12px;
        color: #9CA3AF;
        margin-top: 4px;
        line-height: 1.3;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .statistic-card {
            padding: 16px;
            min-height: 100px;
        }

        .statistic-content {
            gap: 12px;
        }

        .statistic-icon {
            width: 40px;
            height: 40px;
        }

        .statistic-icon i {
            font-size: 20px;
        }

        .statistic-value {
            font-size: 24px;
        }

        .statistic-title {
            font-size: 13px;
        }
    }

    @@media (max-width: 480px) {
        .statistic-card {
            padding: 12px;
            min-height: 90px;
        }

        .statistic-content {
            gap: 10px;
        }

        .statistic-icon {
            width: 36px;
            height: 36px;
        }

        .statistic-icon i {
            font-size: 18px;
        }

        .statistic-value {
            font-size: 20px;
        }

        .statistic-title {
            font-size: 12px;
        }
    }
</style>

@code {
    [Parameter] public DashboardStatistic Statistic { get; set; } = new();
    [Parameter] public EventCallback<DashboardStatistic> OnCardClicked { get; set; }

    private string GetCardClass()
    {
        return Statistic.Type switch
        {
            StatisticType.Attendance => "attendance",
            StatisticType.Active => "active",
            StatisticType.Users => "users",
            StatisticType.Time => "time",
            _ => "general"
        };
    }

    private async Task HandleCardClick()
    {
        await OnCardClicked.InvokeAsync(Statistic);
    }
} 