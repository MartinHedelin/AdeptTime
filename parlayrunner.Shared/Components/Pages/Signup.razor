@page "/signup"
@using parlayrunner.Shared.ViewModels
@using parlayrunner.Shared.Interfaces
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService
@layout AuthLayout

<PageTitle>Sign Up</PageTitle>

<AuthRedirect RequireAuth="false">
<div class="signup-container">
    <div class="card signup-card">
            <div class="page-header text-center">
                <h1 class="page-title">Create Account</h1>
                <p class="page-subtitle">Join us today and get started</p>
            </div>

            <EditForm Model="@signupModel" OnValidSubmit="@HandleSignup">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="name" class="form-label">Full Name</label>
                    <InputText id="name" @bind-Value="signupModel.Name" class="form-control" placeholder="Enter your full name" />
                    <ValidationMessage For="@(() => signupModel.Name)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText id="email" @bind-Value="signupModel.Email" class="form-control" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => signupModel.Email)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" @bind-Value="signupModel.Password" class="form-control" placeholder="Create a password" />
                    <ValidationMessage For="@(() => signupModel.Password)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" type="password" @bind-Value="signupModel.ConfirmPassword" class="form-control" placeholder="Confirm your password" />
                    <ValidationMessage For="@(() => signupModel.ConfirmPassword)" class="validation-message" />
                </div>

                <div class="form-group">
                    <div class="form-check">
                        <InputCheckbox id="terms" @bind-Value="signupModel.AcceptTerms" class="form-check-input" />
                        <label for="terms" class="form-check-label">
                            I agree to the <a href="#" class="terms-link">Terms of Service</a> and <a href="#" class="terms-link">Privacy Policy</a>
                        </label>
                    </div>
                    <ValidationMessage For="@(() => signupModel.AcceptTerms)" class="validation-message" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-error">
                        @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">
                        @successMessage
                    </div>
                }

                <button type="submit" class="btn btn-primary btn-full-width" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Creating account...</span>
                    }
                    else
                    {
                        <span>Create Account</span>
                    }
                </button>
            </EditForm>

            <div class="divider">
                <span>or</span>
            </div>

            <div class="auth-links">
                <p>Already have an account? <a href="/login" class="auth-link">Sign in here</a></p>
            </div>
        </div>
</div>
</AuthRedirect>

<style>
    .signup-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
    }

    .signup-card {
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    .form-check {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .form-check-input {
        width: auto;
        margin: 0;
        margin-top: 2px;
    }

    .form-check-label {
        margin: 0;
        font-size: 0.9rem;
        color: #7f8c8d;
        line-height: 1.4;
    }

    .terms-link {
        color: #3498db;
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .terms-link:hover {
        color: #2980b9;
        text-decoration: underline;
    }

    .btn-full-width {
        width: 100%;
        margin-bottom: 1.5rem;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        font-size: 0.9rem;
    }

    .alert-error {
        background-color: #fee2e2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .alert-success {
        background-color: #d1fae5;
        color: #059669;
        border: 1px solid #a7f3d0;
    }

    .divider {
        position: relative;
        text-align: center;
        margin: 1.5rem 0;
    }

    .divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background-color: #e9ecef;
    }

    .divider span {
        background-color: white;
        padding: 0 1rem;
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .auth-links {
        text-align: center;
    }

    .auth-links p {
        margin: 0;
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .auth-link {
        color: #3498db;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s ease;
    }

    .auth-link:hover {
        color: #2980b9;
        text-decoration: underline;
    }

    .validation-message {
        color: #dc2626;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    private SignupViewModel signupModel = new();
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;

    private async Task HandleSignup()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            successMessage = null;

            // Simulate loading delay
            await Task.Delay(1000);

            // Basic validation
            if (string.IsNullOrWhiteSpace(signupModel.Name) || 
                string.IsNullOrWhiteSpace(signupModel.Email) || 
                string.IsNullOrWhiteSpace(signupModel.Password))
            {
                errorMessage = "Please fill in all required fields";
                return;
            }

            if (signupModel.Password != signupModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match";
                return;
            }

            if (!signupModel.AcceptTerms)
            {
                errorMessage = "Please accept the terms and conditions";
                return;
            }

            // Create account using authentication service
            var success = await AuthService.LoginAsync(signupModel.Email, signupModel.Password);
            
            if (success)
            {
                successMessage = "Account created successfully! Redirecting...";
                
                // Wait a bit then redirect to dashboard
                await Task.Delay(1500);
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                errorMessage = "Failed to create account. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during signup. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class SignupViewModel
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public bool AcceptTerms { get; set; } = false;
    }
} 