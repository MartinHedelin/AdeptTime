@page "/geofence-regler"
@using parlayrunner.Shared.Models
@using parlayrunner.Shared.Components
@inject NavigationManager Navigation

<PageTitle>Geofence regler</PageTitle>

<div class="geofence-page">
    <PageHeader 
        Title="Geofence regler"
        SearchPlaceholder="Søg i geofence regler..."
        CreateButtonText="Opret"
        OnFilterClicked="HandleFilterClick"
        OnCreateOptionSelected="HandleCreateOptionSelected"
        OnSearchTextChanged="HandleSearchTextChanged" />

    <div class="page-content @(isCreatePanelVisible ? "panel-open" : "")">
        <GeofenceTable GeofenceRules="@filteredRules" OnRuleSelected="HandleRuleSelected" />
    </div>

    <!-- Create Case Panel -->
    <CreateCasePanel 
        IsVisible="isCreatePanelVisible"
        OnClose="CloseCreatePanel"
        OnCaseCreated="HandleCaseCreated"
        Customers="customers"
        Employees="employees" />
</div>

<style>
    .geofence-page {
        min-height: 100vh;
        background: #F9FAFB;
        position: relative;
    }

    .page-content {
        transition: margin-right 0.3s ease;
        margin-right: 0;
    }

    .page-content.panel-open {
        margin-right: 420px;
    }

    .page-content {
        padding: 24px 32px;
    }

    @@media (max-width: 768px) {
        .page-content {
            padding: 16px 20px;
        }
    }
</style>

@code {
    private List<GeofenceRule> geofenceRules = new();
    private List<GeofenceRule> filteredRules = new();
    private string searchText = string.Empty;
    private bool isCreatePanelVisible = false;
    private List<Customer> customers = new();
    private List<Employee> employees = new();

    protected override void OnInitialized()
    {
        InitializeCustomers();
        InitializeEmployees();
        LoadDummyData();
        filteredRules = geofenceRules;
    }

    private void LoadDummyData()
    {
        geofenceRules = new List<GeofenceRule>
        {
            new GeofenceRule
            {
                Id = 1,
                Name = "Christianshavn",
                WorkingHours = "08:00 - 20:00",
                Address = "22 January 2022",
                Latitude = 55.6861,
                Longitude = -77.6304,
                Radius = 250,
                CreatedDate = new DateTime(2022, 1, 22)
            },
            new GeofenceRule
            {
                Id = 2,
                Name = "Christianshavn",
                WorkingHours = "08:00 - 20:00",
                Address = "22 January 2022",
                Latitude = 55.6861,
                Longitude = -77.6304,
                Radius = 500,
                CreatedDate = new DateTime(2022, 1, 22)
            },
            new GeofenceRule
            {
                Id = 3,
                Name = "Christianshavn",
                WorkingHours = "08:00 - 20:00",
                Address = "22 January 2022",
                Latitude = 55.6861,
                Longitude = -77.6304,
                Radius = 250,
                CreatedDate = new DateTime(2022, 1, 22)
            },
            new GeofenceRule
            {
                Id = 4,
                Name = "Christianshavn",
                WorkingHours = "08:00 - 20:00",
                Address = "23 January 2022",
                Latitude = 55.6861,
                Longitude = -77.6304,
                Radius = 500,
                CreatedDate = new DateTime(2022, 1, 23)
            },
            new GeofenceRule
            {
                Id = 5,
                Name = "Christianshavn",
                WorkingHours = "08:00 - 20:00",
                Address = "22 January 2022",
                Latitude = 55.6861,
                Longitude = -77.6304,
                Radius = 250,
                CreatedDate = new DateTime(2022, 1, 22)
            },
            new GeofenceRule
            {
                Id = 6,
                Name = "Christianshavn",
                WorkingHours = "08:00 - 20:00",
                Address = "22 January 2022",
                Latitude = 55.6861,
                Longitude = -77.6304,
                Radius = 500,
                CreatedDate = new DateTime(2022, 1, 22)
            },
            new GeofenceRule
            {
                Id = 7,
                Name = "Nørrebro",
                WorkingHours = "06:00 - 20:00",
                Address = "23 January 2022",
                Latitude = 55.6959,
                Longitude = -77.6304,
                Radius = 300,
                CreatedDate = new DateTime(2022, 1, 23)
            },
            new GeofenceRule
            {
                Id = 8,
                Name = "Vesterbro",
                WorkingHours = "06:00 - 20:00",
                Address = "23 January 2022",
                Latitude = 55.6591,
                Longitude = -77.6304,
                Radius = 300,
                CreatedDate = new DateTime(2022, 1, 23)
            },
            new GeofenceRule
            {
                Id = 9,
                Name = "Østerbro",
                WorkingHours = "06:00 - 20:00",
                Address = "23 January 2022",
                Latitude = 55.7000,
                Longitude = -77.6304,
                Radius = 350,
                CreatedDate = new DateTime(2022, 1, 23)
            },
            new GeofenceRule
            {
                Id = 10,
                Name = "Christianshavn",
                WorkingHours = "08:00 - 20:00",
                Address = "22 January 2022",
                Latitude = 55.6861,
                Longitude = -77.6304,
                Radius = 250,
                CreatedDate = new DateTime(2022, 1, 22)
            }
        };
    }

    private Task HandleFilterClick()
    {
        // TODO: Implement filter functionality
        return Task.CompletedTask;
    }

    private Task HandleCreateClick()
    {
        isCreatePanelVisible = true;
        return Task.CompletedTask;
    }

    private Task HandleCreateOptionSelected(CreateType createType)
    {
        switch (createType)
        {
            case CreateType.Geofence:
                Navigation.NavigateTo("/geofence-create");
                break;
            case CreateType.Case:
                isCreatePanelVisible = true;
                break;
            case CreateType.Employee:
                // TODO: Implement employee creation functionality
                isCreatePanelVisible = true;
                break;
        }
        return Task.CompletedTask;
    }

    private void CloseCreatePanel()
    {
        isCreatePanelVisible = false;
    }

    private void HandleCaseCreated(Case newCase)
    {
        // Handle the newly created case/geofence rule
        StateHasChanged();
    }

    private void InitializeCustomers()
    {
        customers = new List<Customer>
        {
            new Customer { Id = 1, Name = "VVS Hansen ApS", ContactPerson = "Lars Hansen", Email = "lars@vvshansen.dk", Phone = "+45 12 34 56 78" },
            new Customer { Id = 2, Name = "Elektro Nielsen A/S", ContactPerson = "Peter Nielsen", Email = "peter@elektronielsen.dk", Phone = "+45 87 65 43 21" },
            new Customer { Id = 3, Name = "Byg & Co", ContactPerson = "Mette Andersen", Email = "mette@bygco.dk", Phone = "+45 23 45 67 89" }
        };
    }

    private void InitializeEmployees()
    {
        employees = new List<Employee>
        {
            new Employee { Id = 1, Name = "James Carter", Team = "Team London", AvatarUrl = "https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHhzZWFyY2h8MXx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 2, Name = "Liam Anders", Team = "Team London", AvatarUrl = "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHhzZWFyY2h8Mnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" },
            new Employee { Id = 3, Name = "Noah Bennett", Team = "Team London", AvatarUrl = "https://images.unsplash.com/photo-1531746020798-e6953c6e8e04?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHhzZWFyY2h8Nnx8cG9ydHJhaXR8ZW58MHx8MHx8fDA%3D" }
        };
    }

    private Task HandleSearchTextChanged(string searchText)
    {
        this.searchText = searchText;
        FilterRules();
        return Task.CompletedTask;
    }

    private Task HandleRuleSelected(GeofenceRule rule)
    {
        // TODO: Implement rule selection functionality
        return Task.CompletedTask;
    }

    private void FilterRules()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredRules = geofenceRules;
        }
        else
        {
            filteredRules = geofenceRules.Where(r => 
                r.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                r.Address.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                r.WorkingHours.Contains(searchText, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        StateHasChanged();
    }
} 